{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@microsoft/fast-element/dist/esm/platform.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./node_modules/@microsoft/fast-element/dist/esm/dom.js","webpack:///./node_modules/@microsoft/fast-element/dist/esm/observation/notifier.js","webpack:///./node_modules/@microsoft/fast-element/dist/esm/observation/observable.js","webpack:///./node_modules/@microsoft/fast-element/dist/esm/directives/directive.js","webpack:///./node_modules/@microsoft/fast-element/dist/esm/directives/binding.js","webpack:///./node_modules/@microsoft/fast-element/dist/esm/template-compiler.js","webpack:///./node_modules/@microsoft/fast-element/dist/esm/view.js","webpack:///./node_modules/@microsoft/fast-element/dist/esm/template.js","webpack:///./node_modules/@microsoft/fast-element/dist/esm/styles.js","webpack:///./node_modules/@microsoft/fast-element/dist/esm/attributes.js","webpack:///./node_modules/@microsoft/fast-element/dist/esm/fast-definitions.js","webpack:///./node_modules/@microsoft/fast-element/dist/esm/controller.js","webpack:///./node_modules/@microsoft/fast-element/dist/esm/fast-element.js","webpack:///./src/main.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","$global","globalThis","global","self","window","Function","_a","trustedTypes","createPolicy","g","this","e","__decorate","decorators","target","desc","arguments","length","getOwnPropertyDescriptor","Reflect","decorate","__metadata","metadataKey","metadataValue","metadata","updateQueue","fastHTMLPolicy","createHTML","html","htmlPolicy","processQueue","index","scan","newLength","marker","Math","random","toString","substring","_interpolationStart","_interpolationEnd","DOM","freeze","supportsAdoptedStyleSheets","Array","isArray","document","adoptedStyleSheets","CSSStyleSheet","policy","Error","isMarker","node","nodeType","data","startsWith","extractDirectiveIndexFromMarker","parseInt","replace","createInterpolationPlaceholder","attributeName","createBlockPlaceholder","callable","requestAnimationFrame","push","nextUpdate","Promise","resolve","queueUpdate","element","removeAttribute","setAttribute","parent","child","firstChild","removeChild","createTemplateWalker","fragment","createTreeWalker","spilloverSubscribe","subscriber","spillover","indexOf","spilloverUnsubscribe","splice","spilloverNotifySubscribers","args","source","ii","handleChange","spilloverHas","SubscriberSet","initialSubscriber","sub1","sub2","has","subscribe","unsubscribe","notify","PropertyChangeNotifier","subscribers","propertyName","propertyToWatch","propertyToUnwatch","volatileRegex","notifierLookup","WeakMap","accessorLookup","watcher","createArrayObserver","array","DefaultObservableAccessor","field","callback","watch","newValue","oldValue","getNotifier","Observable","factory","found","$fastController","set","needsRefresh","nameOrAccessor","getAccessors","getValue","setValue","accessors","currentTarget","getPrototypeOf","slice","binding","isVolatileBinding","test","trackVolatile","observable","currentEvent","setCurrentEvent","event","ExecutionContext","parentContext","isFirst","isLast","defaultExecutionContext","seal","super","needsQueue","first","last","propertySource","notifier","next","context","disconnect","previousWatcher","result","current","prev","prevValue","Directive","targetIndex","normalBind","bindingObserver","isBindingVolatile","updateTarget","observe","triggerBind","addEventListener","targetName","normalUnbind","contentUnbind","view","$fastView","isComposed","unbind","needsBindOnly","triggerUnbind","removeEventListener","updateAttributeTarget","updateBooleanAttributeTarget","setBooleanAttribute","updateContentTarget","textContent","$fastTemplate","remove","insertBefore","updatePropertyTarget","updateClassTarget","classVersions","version","names","split","currentName","classList","add","createPlaceholder","originalTargetName","cleanedTargetName","substr","preventDefault","CompilationContext","behaviorFactories","directive","targetAtContent","addFactory","sharedContext","directives","shareable","reset","createAggregateBinding","parts","partCount","finalParts","map","x","scope","output","interpolationEndLength","parseContent","valueParts","bindingParts","literal","directiveIndex","compileAttributes","includeBasicValues","attributes","attr","attrValue","parseResult","removeAttributeNode","compileContent","walker","lastNode","currentPart","currentNode","parentNode","createTextNode","nextSibling","captureContentBinding","nextNode","range","createRange","HTMLView","behaviors","lastChild","appendChild","hasChildNodes","end","oldSource","views","setStart","setEnd","deleteContents","j","jj","behaviorCount","hasHostBehaviors","targetOffset","viewBehaviorFactories","hostBehaviorFactories","hostBindingTarget","template","createElement","innerHTML","fec","content","firstElementChild","tagName","adoptNode","borrow","createComment","release","compileTemplate","cloneNode","viewFactories","behaviorIndex","factoryIndex","createBehavior","hostFactories","host","getElementById","appendTo","lastAttributeNameRegex","styleLookup","Map","ElementStyles","concat","reduceStyles","styles","reduce","curr","reduceBehaviors","styleSheetCache","AdoptedStyleSheetsStyles","StyleElementStyles","styleSheets","sheet","replaceSync","sourceSheets","filter","styleClassId","styleClass","body","className","prepend","querySelectorAll","booleanConverter","toView","fromView","Owner","attribute","toLowerCase","converter","guards","Set","fieldName","callbackName","hasCallback","tryReflectToAttribute","track","delete","latestValue","attributeLists","list","config","defaultShadowOptions","defaultElementOptions","fastDefinitions","type","nameOrConfig","definition","collect","observedAttributes","propertyLookup","attributeLookup","shadowOptions","assign","elementOptions","registry","customElements","isDefined","proto","define","shadowRoots","defaultEventOptions","bubbles","composed","getShadowRoot","shadowRoot","boundObservables","needsInitialization","_template","_styles","isConnected","attachShadow","renderTemplate","removeStyles","addStyles","sourceBehaviors","getRootNode","addStylesTo","addBehaviors","removeStylesFrom","removeBehaviors","targetBehaviors","finishInitialization","attrDef","onAttributeChangedCallback","detail","options","dispatchEvent","CustomEvent","propertyNames","keys","resolveTemplate","resolveStyles","dispose","removeChildNodes","render","controller","forType","constructor","createFASTElement","BaseType","forCustomElement","emit","onConnectedCallback","onDisconnectedCallback","FASTElement","HTMLElement","from","nameOrDef","strings","values","currentString","match","exec","diceCharColor","diceChar","roll"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,gCClFrD,8CAKO,MAAMC,EAAU,WACnB,GAA0B,oBAAfC,WAEP,OAAOA,WAEX,QAAsB,IAAXC,EAEP,OAAOA,EAEX,GAAoB,oBAATC,KAEP,OAAOA,KAEX,GAAsB,oBAAXC,OAEP,OAAOA,OAEX,IAII,OAAO,IAAIC,SAAS,cAAb,GAEX,MAAOC,GAGH,MAAO,IA1BQ,QA8BM,IAAzBN,EAAQO,eACRP,EAAQO,aAAe,CAAEC,aAAc,CAACf,EAAGX,IAAMA,M,+DCpCrD,IAAI2B,EAGJA,EAAI,WACH,OAAOC,KADJ,GAIJ,IAECD,EAAIA,GAAK,IAAIJ,SAAS,cAAb,GACR,MAAOM,GAEc,iBAAXP,SAAqBK,EAAIL,QAOrCrC,EAAOD,QAAU2C,G,gFCiCV,SAASG,EAAWC,EAAYC,EAAQvB,EAAKwB,GAChD,IAA2HzC,EAAvHD,EAAI2C,UAAUC,OAAQnC,EAAIT,EAAI,EAAIyC,EAAkB,OAATC,EAAgBA,EAAOrC,OAAOwC,yBAAyBJ,EAAQvB,GAAOwB,EACrH,GAAuB,iBAAZI,SAAoD,mBAArBA,QAAQC,SAAyBtC,EAAIqC,QAAQC,SAASP,EAAYC,EAAQvB,EAAKwB,QACpH,IAAK,IAAI/C,EAAI6C,EAAWI,OAAS,EAAGjD,GAAK,EAAGA,KAASM,EAAIuC,EAAW7C,MAAIc,GAAKT,EAAI,EAAIC,EAAEQ,GAAKT,EAAI,EAAIC,EAAEwC,EAAQvB,EAAKT,GAAKR,EAAEwC,EAAQvB,KAAST,GAChJ,OAAOT,EAAI,GAAKS,GAAKJ,OAAOC,eAAemC,EAAQvB,EAAKT,GAAIA,EAOzD,SAASuC,EAAWC,EAAaC,GACpC,GAAuB,iBAAZJ,SAAoD,mBAArBA,QAAQK,SAAyB,OAAOL,QAAQK,SAASF,EAAaC,G,WC/DpH,MAAME,EAAc,GAEdC,EAAiB,IAAQnB,aAAaC,aAAa,YAAa,CAClEmB,WAAYC,GAAQA,IAGxB,IAAIC,EAAaH,EACjB,SAASI,IAEL,IAAIC,EAAQ,EACZ,KAAOA,EAAQN,EAAYR,QAAQ,CAS/B,GARaQ,EAAYM,GACpB5D,OACL4D,IAMIA,EAXS,KAWS,CAGlB,IAAK,IAAIC,EAAO,EAAGC,EAAYR,EAAYR,OAASc,EAAOC,EAAOC,EAAWD,IACzEP,EAAYO,GAAQP,EAAYO,EAAOD,GAE3CN,EAAYR,QAAUc,EACtBA,EAAQ,GAGhBN,EAAYR,OAAS,EAEzB,MAAMiB,EAAS,QAAQC,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,GAElDC,EAAyBL,EAAH,IAEtBM,EAAoB,IAAIN,EAKxBO,EAAM/D,OAAOgE,OAAO,CAI7BC,2BAA4BC,MAAMC,QAAQC,SAASC,qBAC/C,YAAaC,cAAcpD,UAQ/B,cAAcqD,GACV,GAAIpB,IAAeH,EACf,MAAM,IAAIwB,MAAM,yCAEpBrB,EAAaoB,GASjBtB,WAAWC,GACAC,EAAWF,WAAWC,GAMjCuB,SAASC,GACEA,GAA0B,IAAlBA,EAAKC,UAAkBD,EAAKE,KAAKC,WAAWrB,GAM/DsB,gCAAgCJ,GACrBK,SAASL,EAAKE,KAAKI,QAAWxB,EAAH,IAAc,KASpDyB,+BAA+B5B,GACpB,GAAGQ,IAAsBR,IAAQS,IAU5C,iCAAiCoB,EAAe7B,GAC5C,MAAO,GAAG6B,MAAkBlD,KAAKiD,+BAA+B5B,OAQpE8B,uBAAuB9B,GACZ,UAAOG,KAAUH,UAM5B,YAAY+B,GACJrC,EAAYR,OAAS,GACrBb,OAAO2D,sBAAsBjC,GAEjCL,EAAYuC,KAAKF,IAKrBG,WAAU,IACC,IAAIC,QAASC,IAChB1B,EAAI2B,YAAYD,KAYxB,aAAaE,EAAST,EAAe3E,GAC7BA,QACAoF,EAAQC,gBAAgBV,GAGxBS,EAAQE,aAAaX,EAAe3E,IAW5C,oBAAoBoF,EAAST,EAAe3E,GACxCA,EACMoF,EAAQE,aAAaX,EAAe,IACpCS,EAAQC,gBAAgBV,IAMlC,iBAAiBY,GACb,IAAK,IAAIC,EAAQD,EAAOE,WAAsB,OAAVD,EAAgBA,EAAQD,EAAOE,WAC/DF,EAAOG,YAAYF,IAO3BG,qBAAqBC,GACV/B,SAASgC,iBAAiBD,EAAU,IAC3C,MAAM,KCjLd,SAASE,EAAmBC,GACxB,MAAMC,EAAYvE,KAAKuE,WAER,IADDA,EAAUC,QAAQF,IAE5BC,EAAUjB,KAAKgB,GAGvB,SAASG,EAAqBH,GAC1B,MAAMC,EAAYvE,KAAKuE,UACjBlD,EAAQkD,EAAUC,QAAQF,IACjB,IAAXjD,GACAkD,EAAUG,OAAOrD,EAAO,GAGhC,SAASsD,EAA2BC,GAChC,MAAML,EAAYvE,KAAKuE,UACjBM,EAAS7E,KAAK6E,OACpB,IAAK,IAAIvH,EAAI,EAAGwH,EAAKP,EAAUhE,OAAQjD,EAAIwH,IAAMxH,EAC7CiH,EAAUjH,GAAGyH,aAAaF,EAAQD,GAG1C,SAASI,EAAaV,GAClB,OAA+C,IAAxCtE,KAAKuE,UAAUC,QAAQF,GAa3B,MAAMW,EAMT,YAAYJ,EAAQK,GAChBlF,KAAKmF,UAAO,EACZnF,KAAKoF,UAAO,EACZpF,KAAKuE,eAAY,EACjBvE,KAAK6E,OAASA,EACd7E,KAAKmF,KAAOD,EAMhB,IAAIZ,GACA,OAAOtE,KAAKmF,OAASb,GAActE,KAAKoF,OAASd,EAMrD,UAAUA,GACFtE,KAAKqF,IAAIf,UAGK,IAAdtE,KAAKmF,UAIS,IAAdnF,KAAKoF,MAITpF,KAAKuE,UAAY,CAACvE,KAAKmF,KAAMnF,KAAKoF,KAAMd,GACxCtE,KAAKsF,UAAYjB,EACjBrE,KAAKuF,YAAcd,EACnBzE,KAAKwF,OAASb,EACd3E,KAAKqF,IAAML,EACXhF,KAAKmF,UAAO,EACZnF,KAAKoF,UAAO,GATRpF,KAAKoF,KAAOd,EAJZtE,KAAKmF,KAAOb,GAmBpB,YAAYA,GACJtE,KAAKmF,OAASb,EACdtE,KAAKmF,UAAO,EAEPnF,KAAKoF,OAASd,IACnBtE,KAAKoF,UAAO,GAOpB,OAAOR,GACH,MAAMO,EAAOnF,KAAKmF,KACZC,EAAOpF,KAAKoF,KACZP,EAAS7E,KAAK6E,YACP,IAATM,GACAA,EAAKJ,aAAaF,EAAQD,QAEjB,IAATQ,GACAA,EAAKL,aAAaF,EAAQD,IAS/B,MAAMa,EAKT,YAAYZ,GACR7E,KAAK0F,YAAc,GACnB1F,KAAK6E,OAASA,EAMlB,OAAOc,GACH,MAAMD,EAAc1F,KAAK0F,YAAYC,QACjB,IAAhBD,GACAA,EAAYF,OAAOG,GAQ3B,UAAUrB,EAAYsB,GAClB,IAAIF,EAAc1F,KAAK0F,YAAYE,QACf,IAAhBF,IACA1F,KAAK0F,YAAYE,GAAmBF,EAAc,IAAIT,EAAcjF,KAAK6E,SAE7Ea,EAAYJ,UAAUhB,GAO1B,YAAYA,EAAYuB,GACpB,MAAMH,EAAc1F,KAAK0F,YAAYG,QACjB,IAAhBH,GAGJA,EAAYH,YAAYjB,ICvJhC,MAAMwB,EAAgB,oBAChBC,EAAiB,IAAIC,QACrBC,EAAiB,IAAID,QAC3B,IAAIE,OAAU,EACVC,EAAuBC,IACvB,MAAM,IAAI5D,MAAM,8DAEpB,MAAM6D,EACF,YAAYxI,GACRmC,KAAKnC,KAAOA,EACZmC,KAAKsG,MAAQ,IAAIzI,EACjBmC,KAAKuG,SAAc1I,EAAH,UAEpB,SAASgH,GAIL,YAHgB,IAAZqB,GACAA,EAAQM,MAAM3B,EAAQ7E,KAAKnC,MAExBgH,EAAO7E,KAAKsG,OAEvB,SAASzB,EAAQ4B,GACb,MAAMH,EAAQtG,KAAKsG,MACbI,EAAW7B,EAAOyB,GACxB,GAAII,IAAaD,EAAU,CACvB5B,EAAOyB,GAASG,EAChB,MAAMF,EAAW1B,EAAO7E,KAAKuG,UACL,mBAAbA,GACPA,EAAS9I,KAAKoH,EAAQ6B,EAAUD,GAGpCE,EAAY9B,GAAQW,OAAOxF,KAAKnC,QAQrC,MAAM+I,EAAa5I,OAAOgE,OAAO,CAKpC,wBAAwB6E,GACpBV,EAAsBU,GAM1B,YAAYhC,GACR,IAAIiC,EAAQjC,EAAOkC,iBAAmBhB,EAAe5H,IAAI0G,GASzD,YARc,IAAViC,IACI5E,MAAMC,QAAQ0C,GACdiC,EAAQX,EAAoBtB,GAG5BkB,EAAeiB,IAAInC,EAASiC,EAAQ,IAAIrB,EAAuBZ,KAGhEiC,GAOX,MAAMjC,EAAQc,QACM,IAAZO,GACAA,EAAQM,MAAM3B,EAAQc,IAO9B,qBACoB,IAAZO,IACAA,EAAQe,cAAe,IAQ/B,OAAOpC,EAAQD,GAEX+B,EAAY9B,GAAQW,OAAOZ,IAQ/B,eAAexE,EAAQ8G,GACW,iBAAnBA,IACPA,EAAiB,IAAIb,EAA0Ba,IAEnDlH,KAAKmH,aAAa/G,GAAQkD,KAAK4D,GAC/BzG,QAAQxC,eAAemC,EAAQ8G,EAAerJ,KAAM,CAChDK,YAAY,EACZC,IAAK,WACD,OAAO+I,EAAeE,SAASpH,OAEnCgH,IAAK,SAAUP,GACXS,EAAeG,SAASrH,KAAMyG,OAS1C,aAAarG,GACT,IAAIkH,EAAYrB,EAAe9H,IAAIiC,GACnC,QAAkB,IAAdkH,EAAsB,CACtB,IAAIC,EAAgB9G,QAAQ+G,eAAepH,GAC3C,UAAqB,IAAdkH,GAA0C,OAAlBC,GAC3BD,EAAYrB,EAAe9H,IAAIoJ,GAC/BA,EAAgB9G,QAAQ+G,eAAeD,GAGvCD,OADc,IAAdA,EACY,GAGAA,EAAUG,MAAM,GAEhCxB,EAAee,IAAI5G,EAAQkH,GAE/B,OAAOA,GASX,QAAQI,EAASxC,EAAmByC,EAAoB3H,KAAK2H,kBAAkBD,IAC3E,OAAO,IAAI,EAA8BA,EAASxC,EAAmByC,IAOzEA,kBAAkBD,GACP5B,EAAc8B,KAAKF,EAAQ/F,cAGpCgF,EAAcC,EAAWD,YAEzBjD,GADgBkD,EAAWiB,cACb9F,EAAI2B,aAOjB,SAASoE,EAAW1H,EAAQ8G,GAC/BN,EAAW3I,eAAemC,EAAQ8G,GAiBtC,IAAIa,EAAe,KAKZ,SAASC,EAAgBC,GAC5BF,EAAeE,EAMZ,MAAMC,EACT,cAIIlI,KAAKqB,MAAQ,EAIbrB,KAAKO,OAAS,EAIdP,KAAK8D,OAAS,KAId9D,KAAKmI,cAAgB,KAKzB,YACI,OAAOJ,EAMX,aACI,OAAO/H,KAAKqB,MAAQ,GAAM,EAM9B,YACI,OAAOrB,KAAKqB,MAAQ,GAAM,EAM9B,cACI,OAAsB,IAAfrB,KAAKqB,MAMhB,iBACI,OAAQrB,KAAKoI,UAAYpI,KAAKqI,OAMlC,aACI,OAAOrI,KAAKqB,QAAUrB,KAAKO,OAAS,GAG5CqG,EAAW3I,eAAeiK,EAAiBhJ,UAAW,SACtD0H,EAAW3I,eAAeiK,EAAiBhJ,UAAW,UAK/C,MAAMoJ,EAA0BtK,OAAOuK,KAAK,IAAIL,GACvD,MAAM,UAAsCjD,EACxC,YAAYyC,EAASxC,EAAmByC,GAAoB,GACxDa,MAAMd,EAASxC,GACflF,KAAK0H,QAAUA,EACf1H,KAAK2H,kBAAoBA,EACzB3H,KAAKiH,cAAe,EACpBjH,KAAKyI,YAAa,EAClBzI,KAAK0I,MAAQ1I,KACbA,KAAK2I,KAAO,KACZ3I,KAAK4I,oBAAiB,EACtB5I,KAAK2F,kBAAe,EACpB3F,KAAK6I,cAAW,EAChB7I,KAAK8I,UAAO,EAEhB,QAAQjE,EAAQkE,GACR/I,KAAKiH,cAA8B,OAAdjH,KAAK2I,MAC1B3I,KAAKgJ,aAET,MAAMC,EAAkB/C,EACxBA,EAAUlG,KAAKiH,aAAejH,UAAO,EACrCA,KAAKiH,aAAejH,KAAK2H,kBACzB,MAAMuB,EAASlJ,KAAK0H,QAAQ7C,EAAQkE,GAEpC,OADA7C,EAAU+C,EACHC,EAEX,aACI,GAAkB,OAAdlJ,KAAK2I,KAAe,CACpB,IAAIQ,EAAUnJ,KAAK0I,MACnB,UAAmB,IAAZS,GACHA,EAAQN,SAAStD,YAAYvF,KAAMmJ,EAAQxD,cAC3CwD,EAAUA,EAAQL,KAEtB9I,KAAK2I,KAAO,KACZ3I,KAAKiH,cAAe,GAI5B,MAAM2B,EAAgBjD,GAClB,MAAMyD,EAAOpJ,KAAK2I,KACZE,EAAWlC,EAAYiC,GACvBO,EAAmB,OAATC,EAAgBpJ,KAAK0I,MAAQ,GAK7C,GAJAS,EAAQP,eAAiBA,EACzBO,EAAQxD,aAAeA,EACvBwD,EAAQN,SAAWA,EACnBA,EAASvD,UAAUtF,KAAM2F,GACZ,OAATyD,EAAe,CACf,IAAKpJ,KAAKiH,aAAc,CACpBf,OAAU,EACV,MAAMmD,EAAYD,EAAKR,eAAeQ,EAAKzD,cAC3CO,EAAUlG,KACN4I,IAAmBS,IACnBrJ,KAAKiH,cAAe,GAG5BmC,EAAKN,KAAOK,EAEhBnJ,KAAK2I,KAAOQ,EAGhB,eACQnJ,KAAKyI,aACLzI,KAAKyI,YAAa,EAClB/E,EAAY1D,OAIpB,OACsB,OAAdA,KAAK2I,OACL3I,KAAKyI,YAAa,EAClBzI,KAAKwF,OAAOxF,QCrUjB,MAAMsJ,EACT,cAIItJ,KAAKuJ,YAAc,GCN3B,SAASC,EAAW3E,EAAQkE,GACxB/I,KAAK6E,OAASA,EACd7E,KAAK+I,QAAUA,EACc,OAAzB/I,KAAKyJ,kBACLzJ,KAAKyJ,gBAAkB7C,EAAWc,QAAQ1H,KAAK0H,QAAS1H,KAAMA,KAAK0J,oBAEvE1J,KAAK2J,aAAa3J,KAAKyJ,gBAAgBG,QAAQ/E,EAAQkE,IAE3D,SAASc,EAAYhF,EAAQkE,GACzB/I,KAAK6E,OAASA,EACd7E,KAAK+I,QAAUA,EACf/I,KAAKI,OAAO0J,iBAAiB9J,KAAK+J,WAAY/J,MAElD,SAASgK,IACLhK,KAAKyJ,gBAAgBT,aACrBhJ,KAAK6E,OAAS,KACd7E,KAAK+I,QAAU,KAEnB,SAASkB,IACLjK,KAAKyJ,gBAAgBT,aACrBhJ,KAAK6E,OAAS,KACd7E,KAAK+I,QAAU,KACf,MAAMmB,EAAOlK,KAAKI,OAAO+J,eACZ,IAATD,GAAmBA,EAAKE,aACxBF,EAAKG,SACLH,EAAKI,eAAgB,GAG7B,SAASC,IACLvK,KAAKI,OAAOoK,oBAAoBxK,KAAK+J,WAAY/J,MACjDA,KAAK6E,OAAS,KACd7E,KAAK+I,QAAU,KAEnB,SAAS0B,EAAsBlM,GAC3BwD,EAAI8B,aAAa7D,KAAKI,OAAQJ,KAAK+J,WAAYxL,GAEnD,SAASmM,EAA6BnM,GAClCwD,EAAI4I,oBAAoB3K,KAAKI,OAAQJ,KAAK+J,WAAYxL,GAE1D,SAASqM,EAAoBrM,GAOzB,GAJIA,UACAA,EAAQ,IAGRA,EAAMK,OAAQ,CACdoB,KAAKI,OAAOyK,YAAc,GAC1B,IAAIX,EAAOlK,KAAKI,OAAO+J,eAGV,IAATD,EACAA,EAAO3L,EAAMK,SAOToB,KAAKI,OAAO0K,gBAAkBvM,IAC1B2L,EAAKE,aACLF,EAAKa,SACLb,EAAKG,UAETH,EAAO3L,EAAMK,UAKhBsL,EAAKE,WAODF,EAAKI,gBACVJ,EAAKI,eAAgB,EACrBJ,EAAKpL,KAAKkB,KAAK6E,OAAQ7E,KAAK+I,WAR5BmB,EAAKE,YAAa,EAClBF,EAAKpL,KAAKkB,KAAK6E,OAAQ7E,KAAK+I,SAC5BmB,EAAKc,aAAahL,KAAKI,QACvBJ,KAAKI,OAAO+J,UAAYD,EACxBlK,KAAKI,OAAO0K,cAAgBvM,OAO/B,CACD,MAAM2L,EAAOlK,KAAKI,OAAO+J,eAGZ,IAATD,GAAmBA,EAAKE,aACxBF,EAAKE,YAAa,EAClBF,EAAKa,SACDb,EAAKI,cACLJ,EAAKI,eAAgB,EAGrBJ,EAAKG,UAGbrK,KAAKI,OAAOyK,YAActM,GAGlC,SAAS0M,EAAqB1M,GAC1ByB,KAAKI,OAAOJ,KAAK+J,YAAcxL,EAEnC,SAAS2M,EAAkB3M,GACvB,MAAM4M,EAAgBnL,KAAKmL,eAAiBnN,OAAOY,OAAO,MACpDwB,EAASJ,KAAKI,OACpB,IAAIgL,EAAUpL,KAAKoL,SAAW,EAE9B,GAAI7M,SAAyCA,EAAMgC,OAAQ,CACvD,MAAM8K,EAAQ9M,EAAM+M,MAAM,OAC1B,IAAK,IAAIhO,EAAI,EAAGwH,EAAKuG,EAAM9K,OAAQjD,EAAIwH,IAAMxH,EAAG,CAC5C,MAAMiO,EAAcF,EAAM/N,GACN,KAAhBiO,IAGJJ,EAAcI,GAAeH,EAC7BhL,EAAOoL,UAAUC,IAAIF,KAM7B,GAHAvL,KAAKmL,cAAgBA,EACrBnL,KAAKoL,QAAUA,EAAU,EAET,IAAZA,EAAJ,CAIAA,GAAW,EACX,IAAK,MAAMvN,KAAQsN,EACXA,EAActN,KAAUuN,GACxBhL,EAAOoL,UAAUT,OAAOlN,IAQ7B,MAAM,UAAyByL,EAKlC,YAAY5B,GACRc,QACAxI,KAAK0H,QAAUA,EACf1H,KAAKlB,KAAO0K,EACZxJ,KAAKqK,OAASL,EACdhK,KAAK2J,aAAec,EAKpBzK,KAAK0L,kBAAoB3J,EAAIkB,+BAC7BjD,KAAK0J,kBAAoB9C,EAAWe,kBAAkB3H,KAAKlB,MAM/D,iBACI,OAAOkB,KAAK2L,mBAEhB,eAAepN,GAEX,GADAyB,KAAK2L,mBAAqBpN,OACZ,IAAVA,EAGJ,OAAQA,EAAM,IACV,IAAK,IAGD,GAFAyB,KAAK4L,kBAAoBrN,EAAMsN,OAAO,GACtC7L,KAAK2J,aAAesB,EACW,cAA3BjL,KAAK4L,kBAAmC,CACxC,MAAMlE,EAAU1H,KAAK0H,QAErB1H,KAAK0H,QAAU,CAACrI,EAAG1B,IAAMoE,EAAId,WAAWyG,EAAQrI,EAAG1B,IAEvD,MACJ,IAAK,IACDqC,KAAK4L,kBAAoBrN,EAAMsN,OAAO,GACtC7L,KAAK2J,aAAee,EACpB,MACJ,IAAK,IACD1K,KAAK4L,kBAAoBrN,EAAMsN,OAAO,GACtC7L,KAAKlB,KAAO+K,EACZ7J,KAAKqK,OAASE,EACd,MACJ,QACIvK,KAAK4L,kBAAoBrN,EACX,UAAVA,IACAyB,KAAK2J,aAAeuB,IASpC,kBACIlL,KAAK2J,aAAeiB,EACpB5K,KAAKqK,OAASJ,EAOlB,eAAe7J,GAEX,OAAO,IAAI,EAAgBA,EAAQJ,KAAK0H,QAAS1H,KAAK0J,kBAAmB1J,KAAKlB,KAAMkB,KAAKqK,OAAQrK,KAAK2J,aAAc3J,KAAK4L,oBAQ1H,MAAM,EAWT,YAAYxL,EAAQsH,EAASgC,EAAmB5K,EAAMuL,EAAQV,EAAcI,GAExE/J,KAAK6E,OAAS,KAEd7E,KAAK+I,QAAU,KAEf/I,KAAKyJ,gBAAkB,KACvBzJ,KAAKI,OAASA,EACdJ,KAAK0H,QAAUA,EACf1H,KAAK0J,kBAAoBA,EACzB1J,KAAKlB,KAAOA,EACZkB,KAAKqK,OAASA,EACdrK,KAAK2J,aAAeA,EACpB3J,KAAK+J,WAAaA,EAGtB,eACI/J,KAAK2J,aAAa3J,KAAKyJ,gBAAgBG,QAAQ5J,KAAK6E,OAAQ7E,KAAK+I,UAGrE,YAAYd,GACRD,EAAgBC,GAChB,MAAMiB,EAASlJ,KAAK0H,QAAQ1H,KAAK6E,OAAQ7E,KAAK+I,SAC9Cf,EAAgB,OACD,IAAXkB,GACAjB,EAAM6D,kBC7PlB,MAAMC,EACF,WAAWlF,GACPA,EAAQ0C,YAAcvJ,KAAKuJ,YAC3BvJ,KAAKgM,kBAAkB1I,KAAKuD,GAEhC,sBAAsBoF,GAClBA,EAAUC,kBACVlM,KAAKmM,WAAWF,GAEpB,QACIjM,KAAKgM,kBAAoB,GACzBhM,KAAKuJ,aAAe,EAExB,UACI6C,EAAgBpM,KAEpB,cAAcqM,GACV,MAAMC,EAAYF,GAAiB,IAAIL,EAIvC,OAHAO,EAAUD,WAAaA,EACvBC,EAAUC,QACVH,EAAgB,KACTE,GAGf,IAAIF,EAAgB,KACpB,SAASI,EAAuBC,GAC5B,GAAqB,IAAjBA,EAAMlM,OACN,OAAOkM,EAAM,GAEjB,IAAI1C,EACJ,MAAM2C,EAAYD,EAAMlM,OAClBoM,EAAaF,EAAMG,IAAKC,GACT,iBAANA,EACA,IAAMA,GAEjB9C,EAAa8C,EAAE9C,YAAcA,EACtB8C,EAAEnF,UASPuE,EAAY,IAAI,EAPN,CAACa,EAAO/D,KACpB,IAAIgE,EAAS,GACb,IAAK,IAAIzP,EAAI,EAAGA,EAAIoP,IAAapP,EAC7ByP,GAAUJ,EAAWrP,GAAGwP,EAAO/D,GAEnC,OAAOgE,IAIX,OADAd,EAAUlC,WAAaA,EAChBkC,EAEX,MAAMe,EAAyBlL,EAAkBvB,OACjD,SAAS0M,EAAalE,EAASxK,GAC3B,MAAM2O,EAAa3O,EAAM+M,MAAMzJ,GAC/B,GAA0B,IAAtBqL,EAAW3M,OACX,OAAO,KAEX,MAAM4M,EAAe,GACrB,IAAK,IAAI7P,EAAI,EAAGwH,EAAKoI,EAAW3M,OAAQjD,EAAIwH,IAAMxH,EAAG,CACjD,MAAM6L,EAAU+D,EAAW5P,GACrB+D,EAAQ8H,EAAQ3E,QAAQ1C,GAC9B,IAAIsL,EACJ,IAAe,IAAX/L,EACA+L,EAAUjE,MAET,CACD,MAAMkE,EAAiBtK,SAASoG,EAAQvH,UAAU,EAAGP,IACrD8L,EAAa7J,KAAKyF,EAAQsD,WAAWgB,IACrCD,EAAUjE,EAAQvH,UAAUP,EAAQ2L,GAExB,KAAZI,GACAD,EAAa7J,KAAK8J,GAG1B,OAAOD,EAEX,SAASG,EAAkBvE,EAASrG,EAAM6K,GAAqB,GAC3D,MAAMC,EAAa9K,EAAK8K,WACxB,IAAK,IAAIlQ,EAAI,EAAGwH,EAAK0I,EAAWjN,OAAQjD,EAAIwH,IAAMxH,EAAG,CACjD,MAAMmQ,EAAOD,EAAWlQ,GAClBoQ,EAAYD,EAAKlP,MACjBoP,EAAcV,EAAalE,EAAS2E,GAC1C,IAAIxE,EAAS,KACO,OAAhByE,EACIJ,IACArE,EAAS,IAAI,EAAiB,IAAMwE,GACpCxE,EAAOa,WAAa0D,EAAK5P,MAI7BqL,EAASsD,EAAuBmB,GAErB,OAAXzE,IACAxG,EAAKkL,oBAAoBH,GACzBnQ,IACAwH,IACAiE,EAAQoD,WAAWjD,KAI/B,SAAS2E,GAAe9E,EAASrG,EAAMoL,GACnC,MAAMH,EAAcV,EAAalE,EAASrG,EAAKmI,aAC/C,GAAoB,OAAhB8C,EAAsB,CACtB,IAAII,EAAWrL,EACf,IAAK,IAAIpF,EAAI,EAAGwH,EAAK6I,EAAYpN,OAAQjD,EAAIwH,IAAMxH,EAAG,CAClD,MAAM0Q,EAAcL,EAAYrQ,GAC1B2Q,EAAoB,IAAN3Q,EACdoF,EACAqL,EAASG,WAAWlD,aAAa5I,SAAS+L,eAAe,IAAKJ,EAASK,aAClD,iBAAhBJ,EACPC,EAAYpD,YAAcmD,GAG1BC,EAAYpD,YAAc,IAC1B9B,EAAQsF,sBAAsBL,IAElCD,EAAWE,EACXlF,EAAQQ,cACJ0E,IAAgBvL,GAChBoL,EAAOQ,WAGfvF,EAAQQ,eCxHhB,MAAMgF,GAAQnM,SAASoM,cAKhB,MAAMC,GAMT,YAAYtK,EAAUuK,GAClB1O,KAAKmE,SAAWA,EAChBnE,KAAK0O,UAAYA,EAIjB1O,KAAK6E,OAAS,KAId7E,KAAK+I,QAAU,KACf/I,KAAKgE,WAAaG,EAASH,WAC3BhE,KAAK2O,UAAYxK,EAASwK,UAM9B,SAASjM,GACLA,EAAKkM,YAAY5O,KAAKmE,UAM1B,aAAazB,GACT,GAAI1C,KAAKmE,SAAS0K,gBACdnM,EAAKwL,WAAWlD,aAAahL,KAAKmE,SAAUzB,OAE3C,CACD,MAAMwL,EAAaxL,EAAKwL,WAClBY,EAAM9O,KAAK2O,UACjB,IACI7F,EADAK,EAAUnJ,KAAKgE,WAEnB,KAAOmF,IAAY2F,GACfhG,EAAOK,EAAQiF,YACfF,EAAWlD,aAAa7B,EAASzG,GACjCyG,EAAUL,EAEdoF,EAAWlD,aAAa8D,EAAKpM,IAOrC,SACI,MAAMyB,EAAWnE,KAAKmE,SAChB2K,EAAM9O,KAAK2O,UACjB,IACI7F,EADAK,EAAUnJ,KAAKgE,WAEnB,KAAOmF,IAAY2F,GACfhG,EAAOK,EAAQiF,YACfjK,EAASyK,YAAYzF,GACrBA,EAAUL,EAEd3E,EAASyK,YAAYE,GAMzB,UACI,MAAMhL,EAAS9D,KAAKgE,WAAWkK,WACzBY,EAAM9O,KAAK2O,UACjB,IACI7F,EADAK,EAAUnJ,KAAKgE,WAEnB,KAAOmF,IAAY2F,GACfhG,EAAOK,EAAQiF,YACftK,EAAOG,YAAYkF,GACnBA,EAAUL,EAEdhF,EAAOG,YAAY6K,GACnB,MAAMJ,EAAY1O,KAAK0O,UACjBK,EAAY/O,KAAK6E,OACvB,IAAK,IAAIvH,EAAI,EAAGwH,EAAK4J,EAAUnO,OAAQjD,EAAIwH,IAAMxH,EAC7CoR,EAAUpR,GAAG+M,OAAO0E,GAQ5B,KAAKlK,EAAQkE,GACT,MAAM2F,EAAY1O,KAAK0O,UACvB,GAAI1O,KAAK6E,SAAWA,EAGf,GAAoB,OAAhB7E,KAAK6E,OAAiB,CAC3B,MAAMkK,EAAY/O,KAAK6E,OACvB7E,KAAK6E,OAASA,EACd7E,KAAK+I,QAAUA,EACf,IAAK,IAAIzL,EAAI,EAAGwH,EAAK4J,EAAUnO,OAAQjD,EAAIwH,IAAMxH,EAAG,CAChD,MAAM6L,EAAUuF,EAAUpR,GAC1B6L,EAAQkB,OAAO0E,GACf5F,EAAQrK,KAAK+F,EAAQkE,QAGxB,CACD/I,KAAK6E,OAASA,EACd7E,KAAK+I,QAAUA,EACf,IAAK,IAAIzL,EAAI,EAAGwH,EAAK4J,EAAUnO,OAAQjD,EAAIwH,IAAMxH,EAC7CoR,EAAUpR,GAAGwB,KAAK+F,EAAQkE,IAOtC,SACI,GAAoB,OAAhB/I,KAAK6E,OACL,OAEJ,MAAM6J,EAAY1O,KAAK0O,UACjBK,EAAY/O,KAAK6E,OACvB,IAAK,IAAIvH,EAAI,EAAGwH,EAAK4J,EAAUnO,OAAQjD,EAAIwH,IAAMxH,EAC7CoR,EAAUpR,GAAG+M,OAAO0E,GAExB/O,KAAK6E,OAAS,KAMlB,8BAA8BmK,GAC1B,GAAqB,IAAjBA,EAAMzO,OAAV,CAIAgO,GAAMU,SAASD,EAAM,GAAGhL,WAAY,GAKpCuK,GAAMW,OAAOF,EAAMA,EAAMzO,OAAS,GAAGoO,UAAUP,YAAa,GAC5DG,GAAMY,iBACN,IAAK,IAAI7R,EAAI,EAAGwH,EAAKkK,EAAMzO,OAAQjD,EAAIwH,IAAMxH,EAAG,CAC5C,MAAM4M,EAAO8E,EAAM1R,GACboR,EAAYxE,EAAKwE,UACjBK,EAAY7E,EAAKrF,OACvB,IAAK,IAAIuK,EAAI,EAAGC,EAAKX,EAAUnO,OAAQ6O,EAAIC,IAAMD,EAC7CV,EAAUU,GAAG/E,OAAO0E,MCjJ7B,MAAM,GAMT,YAAY7N,EAAMmL,GACdrM,KAAKsP,cAAgB,EACrBtP,KAAKuP,kBAAmB,EACxBvP,KAAKmE,SAAW,KAChBnE,KAAKwP,aAAe,EACpBxP,KAAKyP,sBAAwB,KAC7BzP,KAAK0P,sBAAwB,KAC7B1P,KAAKkB,KAAOA,EACZlB,KAAKqM,WAAaA,EAMtB,OAAOsD,GACH,GAAsB,OAAlB3P,KAAKmE,SAAmB,CACxB,IAAIyL,EACJ,MAAM1O,EAAOlB,KAAKkB,KAClB,GAAoB,iBAATA,EAAmB,CAC1B0O,EAAWxN,SAASyN,cAAc,YAClCD,EAASE,UAAY/N,EAAId,WAAWC,GACpC,MAAM6O,EAAMH,EAASI,QAAQC,kBACjB,OAARF,GAAgC,aAAhBA,EAAIG,UACpBN,EAAWG,QAIfH,EAAW1O,EAEf,MAAMgI,EF4FX,SAAyB0G,EAAUvD,GACtC,MAAMlI,EAAWyL,EAASI,QAE1B5N,SAAS+N,UAAUhM,GACnB,MAAM4E,EAAUgD,EAAmBqE,OAAO/D,GAC1CiB,EAAkBvE,EAAS6G,GAAU,GACrC,MAAMF,EAAwB3G,EAAQiD,kBACtCjD,EAAQwD,QACR,MAAMuB,EAAS/L,EAAImC,qBAAqBC,GACxC,IAAIzB,EACJ,KAAQA,EAAOoL,EAAOQ,YAElB,OADAvF,EAAQQ,cACA7G,EAAKC,UACT,KAAK,EACD2K,EAAkBvE,EAASrG,GAC3B,MACJ,KAAK,EACDmL,GAAe9E,EAASrG,EAAMoL,GAC9B,MACJ,KAAK,EACG/L,EAAIU,SAASC,IACbqG,EAAQoD,WAAWE,EAAWtK,EAAIe,gCAAgCJ,KAIlF,IAAI8M,EAAe,EACfzN,EAAIU,SAAS0B,EAASH,cAKtBG,EAAS6G,aAAa5I,SAASiO,cAAc,IAAKlM,EAASH,YAC3DwL,GAAgB,GAEpB,MAAMC,EAAwB1G,EAAQiD,kBAEtC,OADAjD,EAAQuH,UACD,CACHnM,WACAsL,wBACAC,wBACAF,gBEpImBe,CAAgBX,EAAU5P,KAAKqM,YAC9CrM,KAAKmE,SAAW+E,EAAO/E,SACvBnE,KAAKyP,sBAAwBvG,EAAOuG,sBACpCzP,KAAK0P,sBAAwBxG,EAAOwG,sBACpC1P,KAAKwP,aAAetG,EAAOsG,aAC3BxP,KAAKsP,cACDtP,KAAKyP,sBAAsBlP,OAASP,KAAK0P,sBAAsBnP,OACnEP,KAAKuP,iBAAmBvP,KAAK0P,sBAAsBnP,OAAS,EAEhE,MAAM4D,EAAWnE,KAAKmE,SAASqM,WAAU,GACnCC,EAAgBzQ,KAAKyP,sBACrBf,EAAY,IAAIxM,MAAMlC,KAAKsP,eAC3BxB,EAAS/L,EAAImC,qBAAqBC,GACxC,IAAIuM,EAAgB,EAChBnH,EAAcvJ,KAAKwP,aACnB9M,EAAOoL,EAAOQ,WAClB,IAAK,IAAIxJ,EAAK2L,EAAclQ,OAAQmQ,EAAgB5L,IAAM4L,EAAe,CACrE,MAAM7J,EAAU4J,EAAcC,GACxBC,EAAe9J,EAAQ0C,YAC7B,KAAgB,OAAT7G,GAAe,CAClB,GAAI6G,IAAgBoH,EAAc,CAC9BjC,EAAUgC,GAAiB7J,EAAQ+J,eAAelO,GAClD,MAGAA,EAAOoL,EAAOQ,WACd/E,KAIZ,GAAIvJ,KAAKuP,iBAAkB,CACvB,MAAMsB,EAAgB7Q,KAAK0P,sBAC3B,IAAK,IAAIpS,EAAI,EAAGwH,EAAK+L,EAActQ,OAAQjD,EAAIwH,IAAMxH,IAAKoT,EACtDhC,EAAUgC,GAAiBG,EAAcvT,GAAGsT,eAAejB,GAGnE,OAAO,IAAIlB,GAAStK,EAAUuK,GASlC,OAAO7J,EAAQiM,EAAMnB,GACG,iBAATmB,IACPA,EAAO1O,SAAS2O,eAAeD,SAET,IAAtBnB,IACAA,EAAoBmB,GAExB,MAAM5G,EAAOlK,KAAKpB,OAAO+Q,GAGzB,OAFAzF,EAAKpL,KAAK+F,EAAQyD,GAClB4B,EAAK8G,SAASF,GACP5G,GAIf,MAAM+G,GAEN,6ICzGA,MAAMC,GAAc,IAAIC,IAKjB,MAAMC,GACT,cAEIpR,KAAK0O,UAAY,KAOrB,iBAAiBA,GAGb,OAFA1O,KAAK0O,UACkB,OAAnB1O,KAAK0O,UAAqBA,EAAY1O,KAAK0O,UAAU2C,OAAO3C,GACzD1O,KAMX,QAAQnB,GAEJ,OADAqS,GAAYlK,IAAInI,EAAKmB,MACdA,KAMX,YAAYnB,GACR,OAAOqS,GAAY/S,IAAIU,IAAQ,MAcvC,SAASyS,GAAaC,GAClB,OAAOA,EACF3E,IAAKC,GAAMA,aAAauE,GAAgBE,GAAazE,EAAE0E,QAAU,CAAC1E,IAClE2E,OAAO,CAACpI,EAAMqI,IAASrI,EAAKiI,OAAOI,GAAO,IAEnD,SAASC,GAAgBH,GACrB,OAAOA,EACF3E,IAAKC,GAAOA,aAAauE,GAAgBvE,EAAE6B,UAAY,MACvD8C,OAAO,CAACpI,EAAMqI,IACF,OAATA,EACOrI,GAEE,OAATA,IACAA,EAAO,IAEJA,EAAKiI,OAAOI,IACpB,MAvBPL,GAAcxS,OAAS,MACnB,GAAImD,EAAIE,2BAA4B,CAChC,MAAM0P,EAAkB,IAAIR,IAC5B,OAAQI,GAAW,IAAIK,GAAyBL,EAAQI,GAE5D,OAAQJ,GAAW,IAAIM,GAAmBN,IALvB,GA+BhB,MAAMK,WAAiCR,GAC1C,YAAYG,EAAQI,GAChBnJ,QACAxI,KAAKuR,OAASA,EACdvR,KAAK0O,UAAY,KACjB1O,KAAK0O,UAAYgD,GAAgBH,GACjCvR,KAAK8R,YAAcR,GAAaC,GAAQ3E,IAAKC,IACzC,GAAIA,aAAavK,cACb,OAAOuK,EAEX,IAAIkF,EAAQJ,EAAgBxT,IAAI0O,GAMhC,YALc,IAAVkF,IACAA,EAAQ,IAAIzP,cACZyP,EAAMC,YAAYnF,GAClB8E,EAAgB3K,IAAI6F,EAAGkF,IAEpBA,IAGf,YAAY3R,GACRA,EAAOiC,mBAAqB,IAAIjC,EAAOiC,sBAAuBrC,KAAK8R,aAEvE,iBAAiB1R,GACb,MAAM6R,EAAejS,KAAK8R,YAC1B1R,EAAOiC,mBAAqBjC,EAAOiC,mBAAmB6P,OAAQrF,IAAmC,IAA7BoF,EAAazN,QAAQqI,KAGjG,IAAIsF,GAAe,EAOZ,MAAMN,WAA2BT,GACpC,YAAYG,GACR/I,QACAxI,KAAKuR,OAASA,EACdvR,KAAK0O,UAAY,KACjB1O,KAAK0O,UAAYgD,GAAgBH,GACjCvR,KAAK8R,YAAcR,GAAaC,GAChCvR,KAAKoS,WAZF,uBAAsBD,GAc7B,YAAY/R,GACR,MAAM0R,EAAc9R,KAAK8R,YACnBM,EAAapS,KAAKoS,WACpBhS,IAAWgC,WACXhC,EAASgC,SAASiQ,MAEtB,IAAK,IAAI/U,EAAIwU,EAAYvR,OAAS,EAAGjD,GAAK,IAAKA,EAAG,CAC9C,MAAMqG,EAAUvB,SAASyN,cAAc,SACvClM,EAAQmM,UAAYgC,EAAYxU,GAChCqG,EAAQ2O,UAAYF,EACpBhS,EAAOmS,QAAQ5O,IAGvB,iBAAiBvD,GACTA,IAAWgC,WACXhC,EAASgC,SAASiQ,MAEtB,MAAMd,EAASnR,EAAOoS,iBAAiB,IAAIxS,KAAKoS,YAChD,IAAK,IAAI9U,EAAI,EAAGwH,EAAKyM,EAAOhR,OAAQjD,EAAIwH,IAAMxH,EAC1C8C,EAAO6D,YAAYsN,EAAOjU,KC9H/B,MAAMmV,GAAmB,CAC5BC,OAAOnU,GACIA,EAAQ,OAAS,QAE5BoU,SAASpU,GACDA,SAEU,UAAVA,IACU,IAAVA,GACU,IAAVA,GAmCL,MAAM,GAUT,YAAYqU,EAAO/U,EAAMgV,EAAYhV,EAAKiV,cAAerU,EAAO,UAAWsU,GACvE/S,KAAKgT,OAAS,IAAIC,IAClBjT,KAAK4S,MAAQA,EACb5S,KAAKnC,KAAOA,EACZmC,KAAK6S,UAAYA,EACjB7S,KAAKvB,KAAOA,EACZuB,KAAK+S,UAAYA,EACjB/S,KAAKkT,UAAY,IAAIrV,EACrBmC,KAAKmT,aAAkBtV,EAAH,UACpBmC,KAAKoT,YAAcpT,KAAKmT,gBAAgBP,EAAM1T,UACjC,YAATT,QAAoC,IAAdsU,IACtB/S,KAAK+S,UAAYN,IAQzB,SAAS5N,EAAQ4B,GACb,MAAMC,EAAW7B,EAAO7E,KAAKkT,WACvBH,EAAY/S,KAAK+S,eACL,IAAdA,IACAtM,EAAWsM,EAAUJ,SAASlM,IAE9BC,IAAaD,IACb5B,EAAO7E,KAAKkT,WAAazM,EACzBzG,KAAKqT,sBAAsBxO,GACvB7E,KAAKoT,aACLvO,EAAO7E,KAAKmT,cAAczM,EAAUD,GAExC5B,EAAOkC,gBAAgBvB,OAAOxF,KAAKnC,OAO3C,SAASgH,GAEL,OADA+B,EAAW0M,MAAMzO,EAAQ7E,KAAKnC,MACvBgH,EAAO7E,KAAKkT,WAGvB,2BAA2BvP,EAASpF,GAC5ByB,KAAKgT,OAAO3N,IAAI1B,KAGpB3D,KAAKgT,OAAOvH,IAAI9H,GAChB3D,KAAKqH,SAAS1D,EAASpF,GACvByB,KAAKgT,OAAOO,OAAO5P,IAEvB,sBAAsBA,GAClB,MAAMlF,EAAOuB,KAAKvB,KACZuU,EAAShT,KAAKgT,OAChBA,EAAO3N,IAAI1B,IAAqB,aAATlF,GAG3BsD,EAAI2B,YAAY,KACZsP,EAAOvH,IAAI9H,GACX,MAAM6P,EAAc7P,EAAQ3D,KAAKkT,WACjC,OAAQzU,GACJ,IAAK,UACD,MAAMsU,EAAY/S,KAAK+S,UACvBhR,EAAI8B,aAAaF,EAAS3D,KAAK6S,eAAyB,IAAdE,EAAuBA,EAAUL,OAAOc,GAAeA,GACjG,MACJ,IAAK,UACDzR,EAAI4I,oBAAoBhH,EAAS3D,KAAK6S,UAAWW,GAGzDR,EAAOO,OAAO5P,KAStB,eAAeiP,KAAUa,GACrB,MAAMjG,EAAa,GACnBiG,EAAenQ,KAAKsP,EAAMpF,YAC1B,IAAK,IAAIlQ,EAAI,EAAGwH,EAAK2O,EAAelT,OAAQjD,EAAIwH,IAAMxH,EAAG,CACrD,MAAMoW,EAAOD,EAAenW,GAC5B,QAAa,IAAToW,EAGJ,IAAK,IAAItE,EAAI,EAAGC,EAAKqE,EAAKnT,OAAQ6O,EAAIC,IAAMD,EAAG,CAC3C,MAAMuE,EAASD,EAAKtE,GACE,iBAAXuE,EACPnG,EAAWlK,KAAK,IAAI,GAAoBsP,EAAOe,IAG/CnG,EAAWlK,KAAK,IAAI,GAAoBsP,EAAOe,EAAO1U,SAAU0U,EAAOd,UAAWc,EAAOlV,KAAMkV,EAAOZ,aAIlH,OAAOvF,GC3Jf,MAAMoG,GAAuB,CAAEnV,KAAM,QAC/BoV,GAAwB,GACxBC,GAAkB,IAAI3C,IAKrB,MAAM,GAOT,YAAY4C,EAAMC,EAAeD,EAAKE,YACN,iBAAjBD,IACPA,EAAe,CAAEnW,KAAMmW,IAE3BhU,KAAK+T,KAAOA,EACZ/T,KAAKnC,KAAOmW,EAAanW,KACzBmC,KAAK4P,SAAWoE,EAAapE,SAC7B,MAAMpC,EAAa,GAAoB0G,QAAQH,EAAMC,EAAaxG,YAC5D2G,EAAqB,IAAIjS,MAAMsL,EAAWjN,QAC1C6T,EAAiB,GACjBC,EAAkB,GACxB,IAAK,IAAI/W,EAAI,EAAGwH,EAAK0I,EAAWjN,OAAQjD,EAAIwH,IAAMxH,EAAG,CACjD,MAAM6L,EAAUqE,EAAWlQ,GAC3B6W,EAAmB7W,GAAK6L,EAAQ0J,UAChCuB,EAAejL,EAAQtL,MAAQsL,EAC/BkL,EAAgBlL,EAAQ0J,WAAa1J,EAEzCnJ,KAAKwN,WAAaA,EAClBxN,KAAKmU,mBAAqBA,EAC1BnU,KAAKoU,eAAiBA,EACtBpU,KAAKqU,gBAAkBA,EACvBrU,KAAKsU,mBAC8B,IAA/BN,EAAaM,cACPV,GAC+B,OAA/BI,EAAaM,mBACT,EACAtW,OAAOuW,OAAOvW,OAAOuW,OAAO,GAAIX,IAAuBI,EAAaM,eAClFtU,KAAKwU,oBAC+B,IAAhCR,EAAaQ,eACPX,GACA7V,OAAOuW,OAAOvW,OAAOuW,OAAO,GAAIV,IAAwBG,EAAaQ,gBAC/ExU,KAAKuR,YACuB,IAAxByC,EAAazC,YACP,EACArP,MAAMC,QAAQ6R,EAAazC,QACvBH,GAAcxS,OAAOoV,EAAazC,QAClCyC,EAAazC,kBAAkBH,GAC3B4C,EAAazC,OACbH,GAAcxS,OAAO,CAACoV,EAAazC,SAMzD,OAAOkD,EAAWC,gBACd,MAAMX,EAAO/T,KAAK+T,KAClB,IAAK/T,KAAK2U,UAAW,CACjB,MAAMnH,EAAaxN,KAAKwN,WAClBoH,EAAQb,EAAK7U,UACnB,IAAK,IAAI5B,EAAI,EAAGwH,EAAK0I,EAAWjN,OAAQjD,EAAIwH,IAAMxH,EAC9CsJ,EAAW3I,eAAe2W,EAAOpH,EAAWlQ,IAEhDmD,QAAQxC,eAAe8V,EAAM,qBAAsB,CAC/CxV,MAAOyB,KAAKmU,mBACZjW,YAAY,IAEhB4V,GAAgB9M,IAAI+M,EAAM/T,MAC1BA,KAAK2U,WAAY,EAKrB,OAHKF,EAAStW,IAAI6B,KAAKnC,OACnB4W,EAASI,OAAO7U,KAAKnC,KAAMkW,EAAM/T,KAAKwU,gBAEnCxU,KAMX,eAAe+T,GACX,OAAOD,GAAgB3V,IAAI4V,IClFnC,MAAMe,GAAc,IAAI9O,QAClB+O,GAAsB,CACxBC,SAAS,EACTC,UAAU,GAEd,SAASC,GAAcvR,GACnB,OAAOA,EAAQwR,YAAcL,GAAY3W,IAAIwF,IAAY,KAMtD,MAAM,WAAmB8B,EAQ5B,YAAY9B,EAASsQ,GACjBzL,MAAM7E,GACN3D,KAAKoV,iBAAmB,KACxBpV,KAAK0O,UAAY,KACjB1O,KAAKqV,qBAAsB,EAC3BrV,KAAKsV,UAAY,KACjBtV,KAAKuV,QAAU,KAMfvV,KAAKkK,KAAO,KAKZlK,KAAKwV,aAAc,EACnBxV,KAAK2D,QAAUA,EACf3D,KAAKiU,WAAaA,EAClB,MAAMK,EAAgBL,EAAWK,cACjC,QAAsB,IAAlBA,EAA0B,CAC1B,MAAMa,EAAaxR,EAAQ8R,aAAanB,GACb,WAAvBA,EAAc7V,MACdqW,GAAY9N,IAAIrD,EAASwR,GAOjC,MAAM7N,EAAYV,EAAWO,aAAaxD,GAC1C,GAAI2D,EAAU/G,OAAS,EAAG,CACtB,MAAM6U,EAAoBpV,KAAKoV,iBAAmBpX,OAAOY,OAAO,MAChE,IAAK,IAAItB,EAAI,EAAGwH,EAAKwC,EAAU/G,OAAQjD,EAAIwH,IAAMxH,EAAG,CAChD,MAAMqI,EAAe2B,EAAUhK,GAAGO,KAC5BU,EAAQoF,EAAQgC,QACR,IAAVpH,WACOoF,EAAQgC,GACfyP,EAAiBzP,GAAgBpH,KAUjD,eACI,OAAOyB,KAAKsV,UAEhB,aAAa/W,GACLyB,KAAKsV,YAAc/W,IAGvByB,KAAKsV,UAAY/W,EACZyB,KAAKqV,qBACNrV,KAAK0V,eAAenX,IAQ5B,aACI,OAAOyB,KAAKuV,QAEhB,WAAWhX,GACHyB,KAAKuV,UAAYhX,IAGA,OAAjByB,KAAKuV,SACLvV,KAAK2V,aAAa3V,KAAKuV,SAE3BvV,KAAKuV,QAAUhX,EACVyB,KAAKqV,qBAAiC,OAAV9W,GAC7ByB,KAAK4V,UAAUrX,IAOvB,UAAUgT,GACN,MAAMsE,EAAkBtE,EAAO7C,UACzBtO,EAAS8U,GAAclV,KAAK2D,UAC9B3D,KAAK2D,QAAQmS,cACjBvE,EAAOwE,YAAY3V,GACK,OAApByV,GACA7V,KAAKgW,aAAaH,GAO1B,aAAatE,GACT,MAAMsE,EAAkBtE,EAAO7C,UACzBtO,EAAS8U,GAAclV,KAAK2D,UAC9B3D,KAAK2D,QAAQmS,cACjBvE,EAAO0E,iBAAiB7V,GACA,OAApByV,GACA7V,KAAKkW,gBAAgBL,GAO7B,aAAanH,GACT,MAAMyH,EAAkBnW,KAAK0O,YAAc1O,KAAK0O,UAAY,IACtDnO,EAASmO,EAAUnO,OACzB,IAAK,IAAIjD,EAAI,EAAGA,EAAIiD,IAAUjD,EAC1B6Y,EAAgB7S,KAAKoL,EAAUpR,IAEnC,GAAI0C,KAAKwV,YAAa,CAClB,MAAM7R,EAAU3D,KAAK2D,QACrB,IAAK,IAAIrG,EAAI,EAAGA,EAAIiD,IAAUjD,EAC1BoR,EAAUpR,GAAGwB,KAAK6E,EAAS2E,IAQvC,gBAAgBoG,GACZ,MAAMyH,EAAkBnW,KAAK0O,UAC7B,GAAwB,OAApByH,EACA,OAEJ,MAAM5V,EAASmO,EAAUnO,OACzB,IAAK,IAAIjD,EAAI,EAAGA,EAAIiD,IAAUjD,EAAG,CAC7B,MAAM+D,EAAQ8U,EAAgB3R,QAAQkK,EAAUpR,KACjC,IAAX+D,GACA8U,EAAgBzR,OAAOrD,EAAO,GAGtC,GAAIrB,KAAKwV,YAAa,CAClB,MAAM7R,EAAU3D,KAAK2D,QACrB,IAAK,IAAIrG,EAAI,EAAGA,EAAIiD,IAAUjD,EAC1BoR,EAAUpR,GAAG+M,OAAO1G,IAOhC,sBACI,GAAI3D,KAAKwV,YACL,OAEJ,MAAM7R,EAAU3D,KAAK2D,QACjB3D,KAAKqV,oBACLrV,KAAKoW,uBAEc,OAAdpW,KAAKkK,MACVlK,KAAKkK,KAAKpL,KAAK6E,EAAS2E,GAE5B,MAAMoG,EAAY1O,KAAK0O,UACvB,GAAkB,OAAdA,EACA,IAAK,IAAIpR,EAAI,EAAGwH,EAAK4J,EAAUnO,OAAQjD,EAAIwH,IAAMxH,EAC7CoR,EAAUpR,GAAGwB,KAAK6E,EAAS2E,GAGnCtI,KAAKwV,aAAc,EAKvB,yBACI,IAAyB,IAArBxV,KAAKwV,YACL,OAEJxV,KAAKwV,aAAc,EACnB,MAAMtL,EAAOlK,KAAKkK,KACL,OAATA,GACAA,EAAKG,SAET,MAAMqE,EAAY1O,KAAK0O,UACvB,GAAkB,OAAdA,EAAoB,CACpB,MAAM/K,EAAU3D,KAAK2D,QACrB,IAAK,IAAIrG,EAAI,EAAGwH,EAAK4J,EAAUnO,OAAQjD,EAAIwH,IAAMxH,EAC7CoR,EAAUpR,GAAG+M,OAAO1G,IAUhC,2BAA2B9F,EAAM6I,EAAUD,GACvC,MAAM4P,EAAUrW,KAAKiU,WAAWI,gBAAgBxW,QAChC,IAAZwY,GACAA,EAAQC,2BAA2BtW,KAAK2D,QAAS8C,GAWzD,KAAKsN,EAAMwC,EAAQC,GACf,QAAIxW,KAAKwV,aACExV,KAAK2D,QAAQ8S,cAAc,IAAIC,YAAY3C,EAAM/V,OAAOuW,OAAOvW,OAAOuW,OAAO,CAAEgC,UAAUxB,IAAsByB,KAI9H,uBACI,MAAM7S,EAAU3D,KAAK2D,QACfyR,EAAmBpV,KAAKoV,iBAE9B,GAAyB,OAArBA,EAA2B,CAC3B,MAAMuB,EAAgB3Y,OAAO4Y,KAAKxB,GAClC,IAAK,IAAI9X,EAAI,EAAGwH,EAAK6R,EAAcpW,OAAQjD,EAAIwH,IAAMxH,EAAG,CACpD,MAAMqI,EAAegR,EAAcrZ,GACnCqG,EAAQgC,GAAgByP,EAAiBzP,GAE7C3F,KAAKoV,iBAAmB,KAE5B,MAAMnB,EAAajU,KAAKiU,WAED,OAAnBjU,KAAKsV,YACDtV,KAAK2D,QAAQkT,gBAEb7W,KAAKsV,UAAYtV,KAAK2D,QAAQkT,kBAEzB5C,EAAWrE,WAEhB5P,KAAKsV,UAAYrB,EAAWrE,UAAY,OAMzB,OAAnB5P,KAAKsV,WACLtV,KAAK0V,eAAe1V,KAAKsV,WAGR,OAAjBtV,KAAKuV,UACDvV,KAAK2D,QAAQmT,cAEb9W,KAAKuV,QAAUvV,KAAK2D,QAAQmT,gBAEvB7C,EAAW1C,SAEhBvR,KAAKuV,QAAUtB,EAAW1C,QAAU,OAIvB,OAAjBvR,KAAKuV,SACLvV,KAAK4V,UAAU5V,KAAKuV,SAExBvV,KAAKqV,qBAAsB,EAE/B,eAAezF,GACX,MAAMjM,EAAU3D,KAAK2D,QAIfmN,EAAOoE,GAAcvR,IAAYA,EACrB,OAAd3D,KAAKkK,MAELlK,KAAKkK,KAAK6M,UACV/W,KAAKkK,KAAO,MAENlK,KAAKqV,qBAEXtT,EAAIiV,iBAAiBlG,GAErBlB,IAEA5P,KAAKkK,KAAO0F,EAASqH,OAAOtT,EAASmN,EAAMnN,IAWnD,wBAAwBA,GACpB,MAAMuT,EAAavT,EAAQoD,gBAC3B,QAAmB,IAAfmQ,EACA,OAAOA,EAEX,MAAMjD,EAAa,GAAsBkD,QAAQxT,EAAQyT,aACzD,QAAmB,IAAfnD,EACA,MAAM,IAAIzR,MAAM,mCAEpB,OAAQmB,EAAQoD,gBAAkB,IAAI,GAAWpD,EAASsQ,IChUlE,SAASoD,GAAkBC,GACvB,OAAO,cAAcA,EACjB,cAEI9O,QACA,GAAW+O,iBAAiBvX,MAEhC,MAAM+T,EAAMwC,EAAQC,GAChB,OAAOxW,KAAK+G,gBAAgByQ,KAAKzD,EAAMwC,EAAQC,GAEnD,oBACIxW,KAAK+G,gBAAgB0Q,sBAEzB,uBACIzX,KAAK+G,gBAAgB2Q,yBAEzB,yBAAyB7Z,EAAM6I,EAAUD,GACrCzG,KAAK+G,gBAAgBuP,2BAA2BzY,EAAM6I,EAAUD,KASrE,MAAMkR,GAAc3Z,OAAOuW,OAAO8C,GAAkBO,aAAc,CAMrEC,KAAKP,GACMD,GAAkBC,GAQ7BzC,OAAM,CAACd,EAAM+D,IACF,IAAI,GAAsB/D,EAAM+D,GAAWjD,SAASd,OCtCnE,MAAM,IN6GC,SAAcgE,KAAYC,GAC7B,MAAM3L,EAAa,GACnB,IAAInL,EAAO,GACX,IAAK,IAAI5D,EAAI,EAAGwH,EAAKiT,EAAQxX,OAAS,EAAGjD,EAAIwH,IAAMxH,EAAG,CAClD,MAAM2a,EAAgBF,EAAQza,GAC9B,IAAIiB,EAAQyZ,EAAO1a,GAEnB,GADA4D,GAAQ+W,EACJ1Z,aAAiB,GAAc,CAC/B,MAAMqR,EAAWrR,EACjBA,EAAQ,IAAMqR,EAElB,GAAqB,mBAAVrR,EAAsB,CAC7BA,EAAQ,IAAI,EAAiBA,GAC7B,MAAM2Z,EAAQjH,GAAuBkH,KAAKF,GAC5B,OAAVC,IACA3Z,EAAMwL,WAAamO,EAAM,IAG7B3Z,aAAiB+K,GAIjBpI,GAAQ3C,EAAMmN,kBAAkBW,EAAW9L,QAC3C8L,EAAW/I,KAAK/E,IAGhB2C,GAAQ3C,EAIhB,OADA2C,GAAQ6W,EAAQA,EAAQxX,OAAS,GAC1B,IAAI,GAAaW,EAAMmL,IM3Ib;;;;;;;;;yDASoCQ,GAAKA,EAAEuL;cAClDvL,GAAKA,EAAEwL;;kDAE6BxL,GAAKA,EAAEyL;;;EASzD,IAAa,GAAb,cAAgCX,GAIrB,UDsBJ,IAAuBG,GCzBd,GAAXhQ,E,8DACW,GAAXA,E,yDAFQ,GAAU,ID0BOgQ,GC9Bf,CACXja,KAAM,aACN+R,SAAQ,ID8BD,SAAUmE,GACb,IAAI,GAAsBA,EAAM+D,IAAWjD,YC7BtC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * A reference to globalThis, with support\n * for browsers that don't yet support the spec.\n * @public\n */\nexport const $global = (function () {\n    if (typeof globalThis !== \"undefined\") {\n        // We're running in a modern environment.\n        return globalThis;\n    }\n    if (typeof global !== \"undefined\") {\n        // We're running in NodeJS\n        return global;\n    }\n    if (typeof self !== \"undefined\") {\n        // We're running in a worker.\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        // We're running in the browser's main thread.\n        return window;\n    }\n    try {\n        // Hopefully we never get here...\n        // Not all environments allow eval and Function. Use only as a last resort:\n        // eslint-disable-next-line no-new-func\n        return new Function(\"return this\")();\n    }\n    catch (_a) {\n        // If all fails, give up and create an object.\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return {};\n    }\n})();\n// API-only Polyfill for trustedTypes\nif ($global.trustedTypes === void 0) {\n    $global.trustedTypes = { createPolicy: (n, r) => r };\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { $global } from \"./platform\";\nconst updateQueue = [];\n/* eslint-disable */\nconst fastHTMLPolicy = $global.trustedTypes.createPolicy(\"fast-html\", {\n    createHTML: html => html,\n});\n/* eslint-enable */\nlet htmlPolicy = fastHTMLPolicy;\nfunction processQueue() {\n    const capacity = 1024;\n    let index = 0;\n    while (index < updateQueue.length) {\n        const task = updateQueue[index];\n        task.call();\n        index++;\n        // Prevent leaking memory for long chains of recursive calls to `queueMicroTask`.\n        // If we call `queueMicroTask` within a MicroTask scheduled by `queueMicroTask`, the queue will\n        // grow, but to avoid an O(n) walk for every MicroTask we execute, we don't\n        // shift MicroTasks off the queue after they have been executed.\n        // Instead, we periodically shift 1024 MicroTasks off the queue.\n        if (index > capacity) {\n            // Manually shift all values starting at the index back to the\n            // beginning of the queue.\n            for (let scan = 0, newLength = updateQueue.length - index; scan < newLength; scan++) {\n                updateQueue[scan] = updateQueue[scan + index];\n            }\n            updateQueue.length -= index;\n            index = 0;\n        }\n    }\n    updateQueue.length = 0;\n}\nconst marker = `fast-${Math.random().toString(36).substring(2, 8)}`;\n/** @internal */\nexport const _interpolationStart = `${marker}{`;\n/** @internal */\nexport const _interpolationEnd = `}${marker}`;\n/**\n * Common DOM APIs.\n * @public\n */\nexport const DOM = Object.freeze({\n    /**\n     * Indicates whether the DOM supports the adoptedStyleSheets feature.\n     */\n    supportsAdoptedStyleSheets: Array.isArray(document.adoptedStyleSheets) &&\n        \"replace\" in CSSStyleSheet.prototype,\n    /**\n     * Sets the HTML trusted types policy used by the templating engine.\n     * @param policy - The policy to set for HTML.\n     * @remarks\n     * This API can only be called once, for security reasons. It should be\n     * called by the application developer at the start of their program.\n     */\n    setHTMLPolicy(policy) {\n        if (htmlPolicy !== fastHTMLPolicy) {\n            throw new Error(\"The HTML policy can only be set once.\");\n        }\n        htmlPolicy = policy;\n    },\n    /**\n     * Turns a string into trusted HTML using the configured trusted types policy.\n     * @param html - The string to turn into trusted HTML.\n     * @remarks\n     * Used internally by the template engine when creating templates\n     * and setting innerHTML.\n     */\n    createHTML(html) {\n        return htmlPolicy.createHTML(html);\n    },\n    /**\n     * Determines if the provided node is a template marker used by the runtime.\n     * @param node - The node to test.\n     */\n    isMarker(node) {\n        return node && node.nodeType === 8 && node.data.startsWith(marker);\n    },\n    /**\n     * Given a marker node, extract the {@link Directive} index from the placeholder.\n     * @param node - The marker node to extract the index from.\n     */\n    extractDirectiveIndexFromMarker(node) {\n        return parseInt(node.data.replace(`${marker}:`, \"\"));\n    },\n    /**\n     * Creates a placeholder string suitable for marking out a location *within*\n     * an attribute value or HTML content.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by binding directives.\n     */\n    createInterpolationPlaceholder(index) {\n        return `${_interpolationStart}${index}${_interpolationEnd}`;\n    },\n    /**\n     * Creates a placeholder that manifests itself as an attribute on an\n     * element.\n     * @param attributeName - The name of the custom attribute.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by attribute directives such as `ref`, `slotted`, and `children`.\n     */\n    createCustomAttributePlaceholder(attributeName, index) {\n        return `${attributeName}=\"${this.createInterpolationPlaceholder(index)}\"`;\n    },\n    /**\n     * Creates a placeholder that manifests itself as a marker within the DOM structure.\n     * @param index - The directive index to create the placeholder for.\n     * @remarks\n     * Used internally by structural directives such as `repeat`.\n     */\n    createBlockPlaceholder(index) {\n        return `<!--${marker}:${index}-->`;\n    },\n    /**\n     * Schedules DOM update work in the next async batch.\n     * @param callable - The callable function or object to queue.\n     */\n    queueUpdate(callable) {\n        if (updateQueue.length < 1) {\n            window.requestAnimationFrame(processQueue);\n        }\n        updateQueue.push(callable);\n    },\n    /**\n     * Resolves with the next DOM update.\n     */\n    nextUpdate() {\n        return new Promise((resolve) => {\n            DOM.queueUpdate(resolve);\n        });\n    },\n    /**\n     * Sets an attribute value on an element.\n     * @param element - The element to set the attribute value on.\n     * @param attributeName - The attribute name to set.\n     * @param value - The value of the attribute to set.\n     * @remarks\n     * If the value is `null` or `undefined`, the attribute is removed, otherwise\n     * it is set to the provided value using the standard `setAttribute` API.\n     */\n    setAttribute(element, attributeName, value) {\n        if (value === null || value === undefined) {\n            element.removeAttribute(attributeName);\n        }\n        else {\n            element.setAttribute(attributeName, value);\n        }\n    },\n    /**\n     * Sets a boolean attribute value.\n     * @param element - The element to set the boolean attribute value on.\n     * @param attributeName - The attribute name to set.\n     * @param value - The value of the attribute to set.\n     * @remarks\n     * If the value is true, the attribute is added; otherwise it is removed.\n     */\n    setBooleanAttribute(element, attributeName, value) {\n        value\n            ? element.setAttribute(attributeName, \"\")\n            : element.removeAttribute(attributeName);\n    },\n    /**\n     * Removes all the child nodes of the provided parent node.\n     * @param parent - The node to remove the children from.\n     */\n    removeChildNodes(parent) {\n        for (let child = parent.firstChild; child !== null; child = parent.firstChild) {\n            parent.removeChild(child);\n        }\n    },\n    /**\n     * Creates a TreeWalker configured to walk a template fragment.\n     * @param fragment - The fragment to walk.\n     */\n    createTemplateWalker(fragment) {\n        return document.createTreeWalker(fragment, 133, // element, text, comment\n        null, false);\n    },\n});\n","function spilloverSubscribe(subscriber) {\n    const spillover = this.spillover;\n    const index = spillover.indexOf(subscriber);\n    if (index === -1) {\n        spillover.push(subscriber);\n    }\n}\nfunction spilloverUnsubscribe(subscriber) {\n    const spillover = this.spillover;\n    const index = spillover.indexOf(subscriber);\n    if (index !== -1) {\n        spillover.splice(index, 1);\n    }\n}\nfunction spilloverNotifySubscribers(args) {\n    const spillover = this.spillover;\n    const source = this.source;\n    for (let i = 0, ii = spillover.length; i < ii; ++i) {\n        spillover[i].handleChange(source, args);\n    }\n}\nfunction spilloverHas(subscriber) {\n    return this.spillover.indexOf(subscriber) !== -1;\n}\n/**\n * An implementation of {@link Notifier} that efficiently keeps track of\n * subscribers interested in a specific change notification on an\n * observable source.\n *\n * @remarks\n * This set is optimized for the most common scenario of 1 or 2 subscribers.\n * With this in mind, it can store a subscriber in an internal field, allowing it to avoid Array#push operations.\n * If the set ever exceeds two subscribers, it upgrades to an array automatically.\n * @public\n */\nexport class SubscriberSet {\n    /**\n     * Creates an instance of SubscriberSet for the specified source.\n     * @param source - The object source that subscribers will receive notifications from.\n     * @param initialSubscriber - An initial subscriber to changes.\n     */\n    constructor(source, initialSubscriber) {\n        this.sub1 = void 0;\n        this.sub2 = void 0;\n        this.spillover = void 0;\n        this.source = source;\n        this.sub1 = initialSubscriber;\n    }\n    /**\n     * Checks whether the provided subscriber has been added to this set.\n     * @param subscriber - The subscriber to test for inclusion in this set.\n     */\n    has(subscriber) {\n        return this.sub1 === subscriber || this.sub2 === subscriber;\n    }\n    /**\n     * Subscribes to notification of changes in an object's state.\n     * @param subscriber - The object that is subscribing for change notification.\n     */\n    subscribe(subscriber) {\n        if (this.has(subscriber)) {\n            return;\n        }\n        if (this.sub1 === void 0) {\n            this.sub1 = subscriber;\n            return;\n        }\n        if (this.sub2 === void 0) {\n            this.sub2 = subscriber;\n            return;\n        }\n        this.spillover = [this.sub1, this.sub2, subscriber];\n        this.subscribe = spilloverSubscribe;\n        this.unsubscribe = spilloverUnsubscribe;\n        this.notify = spilloverNotifySubscribers;\n        this.has = spilloverHas;\n        this.sub1 = void 0;\n        this.sub2 = void 0;\n    }\n    /**\n     * Unsubscribes from notification of changes in an object's state.\n     * @param subscriber - The object that is unsubscribing from change notification.\n     */\n    unsubscribe(subscriber) {\n        if (this.sub1 === subscriber) {\n            this.sub1 = void 0;\n        }\n        else if (this.sub2 === subscriber) {\n            this.sub2 = void 0;\n        }\n    }\n    /**\n     * Notifies all subscribers.\n     * @param args - Data passed along to subscribers during notification.\n     */\n    notify(args) {\n        const sub1 = this.sub1;\n        const sub2 = this.sub2;\n        const source = this.source;\n        if (sub1 !== void 0) {\n            sub1.handleChange(source, args);\n        }\n        if (sub2 !== void 0) {\n            sub2.handleChange(source, args);\n        }\n    }\n}\n/**\n * An implementation of Notifier that allows subscribers to be notified\n * of individual property changes on an object.\n * @public\n */\nexport class PropertyChangeNotifier {\n    /**\n     * Creates an instance of PropertyChangeNotifier for the specified source.\n     * @param source - The object source that subscribers will receive notifications from.\n     */\n    constructor(source) {\n        this.subscribers = {};\n        this.source = source;\n    }\n    /**\n     * Notifies all subscribers, based on the specified property.\n     * @param propertyName - The property name, passed along to subscribers during notification.\n     */\n    notify(propertyName) {\n        const subscribers = this.subscribers[propertyName];\n        if (subscribers !== void 0) {\n            subscribers.notify(propertyName);\n        }\n    }\n    /**\n     * Subscribes to notification of changes in an object's state.\n     * @param subscriber - The object that is subscribing for change notification.\n     * @param propertyToWatch - The name of the property that the subscriber is interested in watching for changes.\n     */\n    subscribe(subscriber, propertyToWatch) {\n        let subscribers = this.subscribers[propertyToWatch];\n        if (subscribers === void 0) {\n            this.subscribers[propertyToWatch] = subscribers = new SubscriberSet(this.source);\n        }\n        subscribers.subscribe(subscriber);\n    }\n    /**\n     * Unsubscribes from notification of changes in an object's state.\n     * @param subscriber - The object that is unsubscribing from change notification.\n     * @param propertyToUnwatch - The name of the property that the subscriber is no longer interested in watching.\n     */\n    unsubscribe(subscriber, propertyToUnwatch) {\n        const subscribers = this.subscribers[propertyToUnwatch];\n        if (subscribers === void 0) {\n            return;\n        }\n        subscribers.unsubscribe(subscriber);\n    }\n}\n","import { DOM } from \"../dom\";\nimport { PropertyChangeNotifier, SubscriberSet } from \"./notifier\";\nconst volatileRegex = /(\\:|\\&\\&|\\|\\||if)/;\nconst notifierLookup = new WeakMap();\nconst accessorLookup = new WeakMap();\nlet watcher = void 0;\nlet createArrayObserver = (array) => {\n    throw new Error(\"Must call enableArrayObservation before observing arrays.\");\n};\nclass DefaultObservableAccessor {\n    constructor(name) {\n        this.name = name;\n        this.field = `_${name}`;\n        this.callback = `${name}Changed`;\n    }\n    getValue(source) {\n        if (watcher !== void 0) {\n            watcher.watch(source, this.name);\n        }\n        return source[this.field];\n    }\n    setValue(source, newValue) {\n        const field = this.field;\n        const oldValue = source[field];\n        if (oldValue !== newValue) {\n            source[field] = newValue;\n            const callback = source[this.callback];\n            if (typeof callback === \"function\") {\n                callback.call(source, oldValue, newValue);\n            }\n            /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n            getNotifier(source).notify(this.name);\n        }\n    }\n}\n/**\n * Common Observable APIs.\n * @public\n */\nexport const Observable = Object.freeze({\n    /**\n     * @internal\n     * @param factory - The factory used to create array observers.\n     */\n    setArrayObserverFactory(factory) {\n        createArrayObserver = factory;\n    },\n    /**\n     * Gets a notifier for an object or Array.\n     * @param source - The object or Array to get the notifier for.\n     */\n    getNotifier(source) {\n        let found = source.$fastController || notifierLookup.get(source);\n        if (found === void 0) {\n            if (Array.isArray(source)) {\n                found = createArrayObserver(source);\n            }\n            else {\n                notifierLookup.set(source, (found = new PropertyChangeNotifier(source)));\n            }\n        }\n        return found;\n    },\n    /**\n     * Records a property change for a source object.\n     * @param source - The object to record the change against.\n     * @param propertyName - The property to track as changed.\n     */\n    track(source, propertyName) {\n        if (watcher !== void 0) {\n            watcher.watch(source, propertyName);\n        }\n    },\n    /**\n     * Notifies watchers that the currently executing property getter or function is volatile\n     * with respect to its observable dependencies.\n     */\n    trackVolatile() {\n        if (watcher !== void 0) {\n            watcher.needsRefresh = true;\n        }\n    },\n    /**\n     * Notifies subscribers of a source object of changes.\n     * @param source - the object to notify of changes.\n     * @param args - The change args to pass to subscribers.\n     */\n    notify(source, args) {\n        /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n        getNotifier(source).notify(args);\n    },\n    /**\n     * Defines an observable property on an object or prototype.\n     * @param target - The target object to define the observable on.\n     * @param nameOrAccessor - The name of the property to define as observable;\n     * or a custom accessor that specifies the property name and accessor implementation.\n     */\n    defineProperty(target, nameOrAccessor) {\n        if (typeof nameOrAccessor === \"string\") {\n            nameOrAccessor = new DefaultObservableAccessor(nameOrAccessor);\n        }\n        this.getAccessors(target).push(nameOrAccessor);\n        Reflect.defineProperty(target, nameOrAccessor.name, {\n            enumerable: true,\n            get: function () {\n                return nameOrAccessor.getValue(this);\n            },\n            set: function (newValue) {\n                nameOrAccessor.setValue(this, newValue);\n            },\n        });\n    },\n    /**\n     * Finds all the observable accessors defined on the target,\n     * including its prototype chain.\n     * @param target - The target object to search for accessor on.\n     */\n    getAccessors(target) {\n        let accessors = accessorLookup.get(target);\n        if (accessors === void 0) {\n            let currentTarget = Reflect.getPrototypeOf(target);\n            while (accessors === void 0 && currentTarget !== null) {\n                accessors = accessorLookup.get(currentTarget);\n                currentTarget = Reflect.getPrototypeOf(currentTarget);\n            }\n            if (accessors === void 0) {\n                accessors = [];\n            }\n            else {\n                accessors = accessors.slice(0);\n            }\n            accessorLookup.set(target, accessors);\n        }\n        return accessors;\n    },\n    /**\n     * Creates a {@link BindingObserver} that can watch the\n     * provided {@link Binding} for changes.\n     * @param binding - The binding to observe.\n     * @param initialSubscriber - An initial subscriber to changes in the binding value.\n     * @param isVolatileBinding - Indicates whether the binding's dependency list must be re-evaluated on every value evaluation.\n     */\n    binding(binding, initialSubscriber, isVolatileBinding = this.isVolatileBinding(binding)) {\n        return new BindingObserverImplementation(binding, initialSubscriber, isVolatileBinding);\n    },\n    /**\n     * Determines whether a binding expression is volatile and needs to have its dependency list re-evaluated\n     * on every evaluation of the value.\n     * @param binding - The binding to inspect.\n     */\n    isVolatileBinding(binding) {\n        return volatileRegex.test(binding.toString());\n    },\n});\nconst getNotifier = Observable.getNotifier;\nconst trackVolatile = Observable.trackVolatile;\nconst queueUpdate = DOM.queueUpdate;\n/**\n * Decorator: Defines an observable property on the target.\n * @param target - The target to define the observable on.\n * @param nameOrAccessor - The property name or accessor to define the observable as.\n * @public\n */\nexport function observable(target, nameOrAccessor) {\n    Observable.defineProperty(target, nameOrAccessor);\n}\n/**\n * Decorator: Marks a property getter as having volatile observable dependencies.\n * @param target - The target that the property is defined on.\n * @param name - The property name.\n * @param name - The existing descriptor.\n * @public\n */\nexport function volatile(target, name, descriptor) {\n    return Object.assign({}, descriptor, {\n        get: function () {\n            trackVolatile();\n            return descriptor.get.apply(this);\n        },\n    });\n}\nlet currentEvent = null;\n/**\n * @param event - The event to set as current for the context.\n * @internal\n */\nexport function setCurrentEvent(event) {\n    currentEvent = event;\n}\n/**\n * Provides additional contextual information available to behaviors and expressions.\n * @public\n */\nexport class ExecutionContext {\n    constructor() {\n        /**\n         * The index of the current item within a repeat context.\n         */\n        this.index = 0;\n        /**\n         * The length of the current collection within a repeat context.\n         */\n        this.length = 0;\n        /**\n         * The parent data object within a repeat context.\n         */\n        this.parent = null;\n        /**\n         * The parent execution context when in nested context scenarios.\n         */\n        this.parentContext = null;\n    }\n    /**\n     * The current event within an event handler.\n     */\n    get event() {\n        return currentEvent;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * has an even index.\n     */\n    get isEven() {\n        return this.index % 2 === 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * has an odd index.\n     */\n    get isOdd() {\n        return this.index % 2 !== 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is the first item in the collection.\n     */\n    get isFirst() {\n        return this.index === 0;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is somewhere in the middle of the collection.\n     */\n    get isInMiddle() {\n        return !this.isFirst && !this.isLast;\n    }\n    /**\n     * Indicates whether the current item within a repeat context\n     * is the last item in the collection.\n     */\n    get isLast() {\n        return this.index === this.length - 1;\n    }\n}\nObservable.defineProperty(ExecutionContext.prototype, \"index\");\nObservable.defineProperty(ExecutionContext.prototype, \"length\");\n/**\n * The default execution context used in binding expressions.\n * @public\n */\nexport const defaultExecutionContext = Object.seal(new ExecutionContext());\nclass BindingObserverImplementation extends SubscriberSet {\n    constructor(binding, initialSubscriber, isVolatileBinding = false) {\n        super(binding, initialSubscriber);\n        this.binding = binding;\n        this.isVolatileBinding = isVolatileBinding;\n        this.needsRefresh = true;\n        this.needsQueue = true;\n        this.first = this;\n        this.last = null;\n        this.propertySource = void 0;\n        this.propertyName = void 0;\n        this.notifier = void 0;\n        this.next = void 0;\n    }\n    observe(source, context) {\n        if (this.needsRefresh && this.last !== null) {\n            this.disconnect();\n        }\n        const previousWatcher = watcher;\n        watcher = this.needsRefresh ? this : void 0;\n        this.needsRefresh = this.isVolatileBinding;\n        const result = this.binding(source, context);\n        watcher = previousWatcher;\n        return result;\n    }\n    disconnect() {\n        if (this.last !== null) {\n            let current = this.first;\n            while (current !== void 0) {\n                current.notifier.unsubscribe(this, current.propertyName);\n                current = current.next;\n            }\n            this.last = null;\n            this.needsRefresh = true;\n        }\n    }\n    /** @internal */\n    watch(propertySource, propertyName) {\n        const prev = this.last;\n        const notifier = getNotifier(propertySource);\n        const current = prev === null ? this.first : {};\n        current.propertySource = propertySource;\n        current.propertyName = propertyName;\n        current.notifier = notifier;\n        notifier.subscribe(this, propertyName);\n        if (prev !== null) {\n            if (!this.needsRefresh) {\n                watcher = void 0;\n                const prevValue = prev.propertySource[prev.propertyName];\n                watcher = this;\n                if (propertySource === prevValue) {\n                    this.needsRefresh = true;\n                }\n            }\n            prev.next = current;\n        }\n        this.last = current;\n    }\n    /** @internal */\n    handleChange() {\n        if (this.needsQueue) {\n            this.needsQueue = false;\n            queueUpdate(this);\n        }\n    }\n    /** @internal */\n    call() {\n        if (this.last !== null) {\n            this.needsQueue = true;\n            this.notify(this);\n        }\n    }\n}\n","import { DOM } from \"../dom\";\n/**\n * Instructs the template engine to apply behavior to a node.\n * @public\n */\nexport class Directive {\n    constructor() {\n        /**\n         * The index of the DOM node to which the created behavior will apply.\n         */\n        this.targetIndex = 0;\n    }\n}\n/**\n * A directive that attaches special behavior to an element via a custom attribute.\n * @public\n */\nexport class AttachedBehaviorDirective extends Directive {\n    /**\n     *\n     * @param name - The name of the behavior; used as a custom attribute on the element.\n     * @param behavior - The behavior to instantiate and attach to the element.\n     * @param options - Options to pass to the behavior during creation.\n     */\n    constructor(name, behavior, options) {\n        super();\n        this.name = name;\n        this.behavior = behavior;\n        this.options = options;\n    }\n    /**\n     * Creates a placeholder string based on the directive's index within the template.\n     * @param index - The index of the directive within the template.\n     * @remarks\n     * Creates a custom attribute placeholder.\n     */\n    createPlaceholder(index) {\n        return DOM.createCustomAttributePlaceholder(this.name, index);\n    }\n    /**\n     * Creates a behavior for the provided target node.\n     * @param target - The node instance to create the behavior for.\n     * @remarks\n     * Creates an instance of the `behavior` type this directive was constructed with\n     * and passes the target and options to that `behavior`'s constructor.\n     */\n    createBehavior(target) {\n        return new this.behavior(target, this.options);\n    }\n}\n","import { setCurrentEvent, } from \"../observation/observable\";\nimport { Observable } from \"../observation/observable\";\nimport { DOM } from \"../dom\";\nimport { Directive } from \"./directive\";\nfunction normalBind(source, context) {\n    this.source = source;\n    this.context = context;\n    if (this.bindingObserver === null) {\n        this.bindingObserver = Observable.binding(this.binding, this, this.isBindingVolatile);\n    }\n    this.updateTarget(this.bindingObserver.observe(source, context));\n}\nfunction triggerBind(source, context) {\n    this.source = source;\n    this.context = context;\n    this.target.addEventListener(this.targetName, this);\n}\nfunction normalUnbind() {\n    this.bindingObserver.disconnect();\n    this.source = null;\n    this.context = null;\n}\nfunction contentUnbind() {\n    this.bindingObserver.disconnect();\n    this.source = null;\n    this.context = null;\n    const view = this.target.$fastView;\n    if (view !== void 0 && view.isComposed) {\n        view.unbind();\n        view.needsBindOnly = true;\n    }\n}\nfunction triggerUnbind() {\n    this.target.removeEventListener(this.targetName, this);\n    this.source = null;\n    this.context = null;\n}\nfunction updateAttributeTarget(value) {\n    DOM.setAttribute(this.target, this.targetName, value);\n}\nfunction updateBooleanAttributeTarget(value) {\n    DOM.setBooleanAttribute(this.target, this.targetName, value);\n}\nfunction updateContentTarget(value) {\n    // If there's no actual value, then this equates to the\n    // empty string for the purposes of content bindings.\n    if (value === null || value === undefined) {\n        value = \"\";\n    }\n    // If the value has a \"create\" method, then it's a template-like.\n    if (value.create) {\n        this.target.textContent = \"\";\n        let view = this.target.$fastView;\n        // If there's no previous view that we might be able to\n        // reuse then create a new view from the template.\n        if (view === void 0) {\n            view = value.create();\n        }\n        else {\n            // If there is a previous view, but it wasn't created\n            // from the same template as the new value, then we\n            // need to remove the old view if it's still in the DOM\n            // and create a new view from the template.\n            if (this.target.$fastTemplate !== value) {\n                if (view.isComposed) {\n                    view.remove();\n                    view.unbind();\n                }\n                view = value.create();\n            }\n        }\n        // It's possible that the value is the same as the previous template\n        // and that there's actually no need to compose it.\n        if (!view.isComposed) {\n            view.isComposed = true;\n            view.bind(this.source, this.context);\n            view.insertBefore(this.target);\n            this.target.$fastView = view;\n            this.target.$fastTemplate = value;\n        }\n        else if (view.needsBindOnly) {\n            view.needsBindOnly = false;\n            view.bind(this.source, this.context);\n        }\n    }\n    else {\n        const view = this.target.$fastView;\n        // If there is a view and it's currently composed into\n        // the DOM, then we need to remove it.\n        if (view !== void 0 && view.isComposed) {\n            view.isComposed = false;\n            view.remove();\n            if (view.needsBindOnly) {\n                view.needsBindOnly = false;\n            }\n            else {\n                view.unbind();\n            }\n        }\n        this.target.textContent = value;\n    }\n}\nfunction updatePropertyTarget(value) {\n    this.target[this.targetName] = value;\n}\nfunction updateClassTarget(value) {\n    const classVersions = this.classVersions || Object.create(null);\n    const target = this.target;\n    let version = this.version || 0;\n    // Add the classes, tracking the version at which they were added.\n    if (value !== null && value !== undefined && value.length) {\n        const names = value.split(/\\s+/);\n        for (let i = 0, ii = names.length; i < ii; ++i) {\n            const currentName = names[i];\n            if (currentName === \"\") {\n                continue;\n            }\n            classVersions[currentName] = version;\n            target.classList.add(currentName);\n        }\n    }\n    this.classVersions = classVersions;\n    this.version = version + 1;\n    // If this is the first call to add classes, there's no need to remove old ones.\n    if (version === 0) {\n        return;\n    }\n    // Remove classes from the previous version.\n    version -= 1;\n    for (const name in classVersions) {\n        if (classVersions[name] === version) {\n            target.classList.remove(name);\n        }\n    }\n}\n/**\n * A directive that configures data binding to element content and attributes.\n * @public\n */\nexport class BindingDirective extends Directive {\n    /**\n     * Creates an instance of BindingDirective.\n     * @param binding - A binding that returns the data used to update the DOM.\n     */\n    constructor(binding) {\n        super();\n        this.binding = binding;\n        this.bind = normalBind;\n        this.unbind = normalUnbind;\n        this.updateTarget = updateAttributeTarget;\n        /**\n         * Creates a placeholder string based on the directive's index within the template.\n         * @param index - The index of the directive within the template.\n         */\n        this.createPlaceholder = DOM.createInterpolationPlaceholder;\n        this.isBindingVolatile = Observable.isVolatileBinding(this.bind);\n    }\n    /**\n     * Gets/sets the name of the attribute or property that this\n     * binding is targeting.\n     */\n    get targetName() {\n        return this.originalTargetName;\n    }\n    set targetName(value) {\n        this.originalTargetName = value;\n        if (value === void 0) {\n            return;\n        }\n        switch (value[0]) {\n            case \":\":\n                this.cleanedTargetName = value.substr(1);\n                this.updateTarget = updatePropertyTarget;\n                if (this.cleanedTargetName === \"innerHTML\") {\n                    const binding = this.binding;\n                    /* eslint-disable-next-line */\n                    this.binding = (s, c) => DOM.createHTML(binding(s, c));\n                }\n                break;\n            case \"?\":\n                this.cleanedTargetName = value.substr(1);\n                this.updateTarget = updateBooleanAttributeTarget;\n                break;\n            case \"@\":\n                this.cleanedTargetName = value.substr(1);\n                this.bind = triggerBind;\n                this.unbind = triggerUnbind;\n                break;\n            default:\n                this.cleanedTargetName = value;\n                if (value === \"class\") {\n                    this.updateTarget = updateClassTarget;\n                }\n                break;\n        }\n    }\n    /**\n     * Makes this binding target the content of an element rather than\n     * a particular attribute or property.\n     */\n    targetAtContent() {\n        this.updateTarget = updateContentTarget;\n        this.unbind = contentUnbind;\n    }\n    /**\n     * Creates the runtime BindingBehavior instance based on the configuration\n     * information stored in the BindingDirective.\n     * @param target - The target node that the binding behavior should attach to.\n     */\n    createBehavior(target) {\n        /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n        return new BindingBehavior(target, this.binding, this.isBindingVolatile, this.bind, this.unbind, this.updateTarget, this.cleanedTargetName);\n    }\n}\n/**\n * A behavior that updates content and attributes based on a configured\n * BindingDirective.\n * @public\n */\nexport class BindingBehavior {\n    /**\n     * Creates an instance of BindingBehavior.\n     * @param target - The target of the data updates.\n     * @param binding - The binding that returns the latest value for an update.\n     * @param isBindingVolatile - Indicates whether the binding has volatile dependencies.\n     * @param bind - The operation to perform during binding.\n     * @param unbind - The operation to perform during unbinding.\n     * @param updateTarget - The operation to perform when updating.\n     * @param targetName - The name of the target attribute or property to update.\n     */\n    constructor(target, binding, isBindingVolatile, bind, unbind, updateTarget, targetName) {\n        /** @internal */\n        this.source = null;\n        /** @internal */\n        this.context = null;\n        /** @internal */\n        this.bindingObserver = null;\n        this.target = target;\n        this.binding = binding;\n        this.isBindingVolatile = isBindingVolatile;\n        this.bind = bind;\n        this.unbind = unbind;\n        this.updateTarget = updateTarget;\n        this.targetName = targetName;\n    }\n    /** @internal */\n    handleChange() {\n        this.updateTarget(this.bindingObserver.observe(this.source, this.context));\n    }\n    /** @internal */\n    handleEvent(event) {\n        setCurrentEvent(event);\n        const result = this.binding(this.source, this.context);\n        setCurrentEvent(null);\n        if (result !== true) {\n            event.preventDefault();\n        }\n    }\n}\n","import { DOM, _interpolationEnd, _interpolationStart } from \"./dom\";\nimport { BindingDirective } from \"./directives/binding\";\nclass CompilationContext {\n    addFactory(factory) {\n        factory.targetIndex = this.targetIndex;\n        this.behaviorFactories.push(factory);\n    }\n    captureContentBinding(directive) {\n        directive.targetAtContent();\n        this.addFactory(directive);\n    }\n    reset() {\n        this.behaviorFactories = [];\n        this.targetIndex = -1;\n    }\n    release() {\n        sharedContext = this;\n    }\n    static borrow(directives) {\n        const shareable = sharedContext || new CompilationContext();\n        shareable.directives = directives;\n        shareable.reset();\n        sharedContext = null;\n        return shareable;\n    }\n}\nlet sharedContext = null;\nfunction createAggregateBinding(parts) {\n    if (parts.length === 1) {\n        return parts[0];\n    }\n    let targetName;\n    const partCount = parts.length;\n    const finalParts = parts.map((x) => {\n        if (typeof x === \"string\") {\n            return () => x;\n        }\n        targetName = x.targetName || targetName;\n        return x.binding;\n    });\n    const binding = (scope, context) => {\n        let output = \"\";\n        for (let i = 0; i < partCount; ++i) {\n            output += finalParts[i](scope, context);\n        }\n        return output;\n    };\n    const directive = new BindingDirective(binding);\n    directive.targetName = targetName;\n    return directive;\n}\nconst interpolationEndLength = _interpolationEnd.length;\nfunction parseContent(context, value) {\n    const valueParts = value.split(_interpolationStart);\n    if (valueParts.length === 1) {\n        return null;\n    }\n    const bindingParts = [];\n    for (let i = 0, ii = valueParts.length; i < ii; ++i) {\n        const current = valueParts[i];\n        const index = current.indexOf(_interpolationEnd);\n        let literal;\n        if (index === -1) {\n            literal = current;\n        }\n        else {\n            const directiveIndex = parseInt(current.substring(0, index));\n            bindingParts.push(context.directives[directiveIndex]);\n            literal = current.substring(index + interpolationEndLength);\n        }\n        if (literal !== \"\") {\n            bindingParts.push(literal);\n        }\n    }\n    return bindingParts;\n}\nfunction compileAttributes(context, node, includeBasicValues = false) {\n    const attributes = node.attributes;\n    for (let i = 0, ii = attributes.length; i < ii; ++i) {\n        const attr = attributes[i];\n        const attrValue = attr.value;\n        const parseResult = parseContent(context, attrValue);\n        let result = null;\n        if (parseResult === null) {\n            if (includeBasicValues) {\n                result = new BindingDirective(() => attrValue);\n                result.targetName = attr.name;\n            }\n        }\n        else {\n            result = createAggregateBinding(parseResult);\n        }\n        if (result !== null) {\n            node.removeAttributeNode(attr);\n            i--;\n            ii--;\n            context.addFactory(result);\n        }\n    }\n}\nfunction compileContent(context, node, walker) {\n    const parseResult = parseContent(context, node.textContent);\n    if (parseResult !== null) {\n        let lastNode = node;\n        for (let i = 0, ii = parseResult.length; i < ii; ++i) {\n            const currentPart = parseResult[i];\n            const currentNode = i === 0\n                ? node\n                : lastNode.parentNode.insertBefore(document.createTextNode(\"\"), lastNode.nextSibling);\n            if (typeof currentPart === \"string\") {\n                currentNode.textContent = currentPart;\n            }\n            else {\n                currentNode.textContent = \" \";\n                context.captureContentBinding(currentPart);\n            }\n            lastNode = currentNode;\n            context.targetIndex++;\n            if (currentNode !== node) {\n                walker.nextNode();\n            }\n        }\n        context.targetIndex--;\n    }\n}\n/**\n * Compiles a template and associated directives into a raw compilation\n * result which include a cloneable DocumentFragment and factories capable\n * of attaching runtime behavior to nodes within the fragment.\n * @param template - The template to compile.\n * @param directives - The directives referenced by the template.\n * @remarks\n * The template that is provided for compilation is altered in-place\n * and cannot be compiled again. If the original template must be preserved,\n * it is recommended that you clone the original and pass the clone to this API.\n * @public\n */\nexport function compileTemplate(template, directives) {\n    const fragment = template.content;\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1111864\n    document.adoptNode(fragment);\n    const context = CompilationContext.borrow(directives);\n    compileAttributes(context, template, true);\n    const hostBehaviorFactories = context.behaviorFactories;\n    context.reset();\n    const walker = DOM.createTemplateWalker(fragment);\n    let node;\n    while ((node = walker.nextNode())) {\n        context.targetIndex++;\n        switch (node.nodeType) {\n            case 1: // element node\n                compileAttributes(context, node);\n                break;\n            case 3: // text node\n                compileContent(context, node, walker);\n                break;\n            case 8: // comment\n                if (DOM.isMarker(node)) {\n                    context.addFactory(directives[DOM.extractDirectiveIndexFromMarker(node)]);\n                }\n        }\n    }\n    let targetOffset = 0;\n    if (DOM.isMarker(fragment.firstChild)) {\n        // If the first node in a fragment is a marker, that means it's an unstable first node,\n        // because something like a when, repeat, etc. could add nodes before the marker.\n        // To mitigate this, we insert a stable first node. However, if we insert a node,\n        // that will alter the result of the TreeWalker. So, we also need to offset the target index.\n        fragment.insertBefore(document.createComment(\"\"), fragment.firstChild);\n        targetOffset = -1;\n    }\n    const viewBehaviorFactories = context.behaviorFactories;\n    context.release();\n    return {\n        fragment,\n        viewBehaviorFactories,\n        hostBehaviorFactories,\n        targetOffset,\n    };\n}\n","// A singleton Range instance used to efficiently remove ranges of DOM nodes.\n// See the implementation of HTMLView below for further details.\nconst range = document.createRange();\n/**\n * The standard View implementation, which also implements ElementView and SyntheticView.\n * @public\n */\nexport class HTMLView {\n    /**\n     * Constructs an instance of HTMLView.\n     * @param fragment - The html fragment that contains the nodes for this view.\n     * @param behaviors - The behaviors to be applied to this view.\n     */\n    constructor(fragment, behaviors) {\n        this.fragment = fragment;\n        this.behaviors = behaviors;\n        /**\n         * The data that the view is bound to.\n         */\n        this.source = null;\n        /**\n         * The execution context the view is running within.\n         */\n        this.context = null;\n        this.firstChild = fragment.firstChild;\n        this.lastChild = fragment.lastChild;\n    }\n    /**\n     * Appends the view's DOM nodes to the referenced node.\n     * @param node - The parent node to append the view's DOM nodes to.\n     */\n    appendTo(node) {\n        node.appendChild(this.fragment);\n    }\n    /**\n     * Inserts the view's DOM nodes before the referenced node.\n     * @param node - The node to insert the view's DOM before.\n     */\n    insertBefore(node) {\n        if (this.fragment.hasChildNodes()) {\n            node.parentNode.insertBefore(this.fragment, node);\n        }\n        else {\n            const parentNode = node.parentNode;\n            const end = this.lastChild;\n            let current = this.firstChild;\n            let next;\n            while (current !== end) {\n                next = current.nextSibling;\n                parentNode.insertBefore(current, node);\n                current = next;\n            }\n            parentNode.insertBefore(end, node);\n        }\n    }\n    /**\n     * Removes the view's DOM nodes.\n     * The nodes are not disposed and the view can later be re-inserted.\n     */\n    remove() {\n        const fragment = this.fragment;\n        const end = this.lastChild;\n        let current = this.firstChild;\n        let next;\n        while (current !== end) {\n            next = current.nextSibling;\n            fragment.appendChild(current);\n            current = next;\n        }\n        fragment.appendChild(end);\n    }\n    /**\n     * Removes the view and unbinds its behaviors, disposing of DOM nodes afterward.\n     * Once a view has been disposed, it cannot be inserted or bound again.\n     */\n    dispose() {\n        const parent = this.firstChild.parentNode;\n        const end = this.lastChild;\n        let current = this.firstChild;\n        let next;\n        while (current !== end) {\n            next = current.nextSibling;\n            parent.removeChild(current);\n            current = next;\n        }\n        parent.removeChild(end);\n        const behaviors = this.behaviors;\n        const oldSource = this.source;\n        for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n            behaviors[i].unbind(oldSource);\n        }\n    }\n    /**\n     * Binds a view's behaviors to its binding source.\n     * @param source - The binding source for the view's binding behaviors.\n     * @param context - The execution context to run the behaviors within.\n     */\n    bind(source, context) {\n        const behaviors = this.behaviors;\n        if (this.source === source) {\n            return;\n        }\n        else if (this.source !== null) {\n            const oldSource = this.source;\n            this.source = source;\n            this.context = context;\n            for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n                const current = behaviors[i];\n                current.unbind(oldSource);\n                current.bind(source, context);\n            }\n        }\n        else {\n            this.source = source;\n            this.context = context;\n            for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n                behaviors[i].bind(source, context);\n            }\n        }\n    }\n    /**\n     * Unbinds a view's behaviors from its binding source.\n     */\n    unbind() {\n        if (this.source === null) {\n            return;\n        }\n        const behaviors = this.behaviors;\n        const oldSource = this.source;\n        for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n            behaviors[i].unbind(oldSource);\n        }\n        this.source = null;\n    }\n    /**\n     * Efficiently disposes of a contiguous range of synthetic view instances.\n     * @param views - A contiguous range of views to be disposed.\n     */\n    static disposeContiguousBatch(views) {\n        if (views.length === 0) {\n            return;\n        }\n        // Get the first node of the first view in the range.\n        range.setStart(views[0].firstChild, 0);\n        // Get the last node of the last view in the range. Then go one further\n        // because the deleteContents operation isn't inclusive of the end node.\n        // In all cases where we use this API, the node after the last node of\n        // the last view is the comment node that we use as a placeholder.\n        range.setEnd(views[views.length - 1].lastChild.nextSibling, 0);\n        range.deleteContents();\n        for (let i = 0, ii = views.length; i < ii; ++i) {\n            const view = views[i];\n            const behaviors = view.behaviors;\n            const oldSource = view.source;\n            for (let j = 0, jj = behaviors.length; j < jj; ++j) {\n                behaviors[j].unbind(oldSource);\n            }\n        }\n    }\n}\n","import { compileTemplate } from \"./template-compiler\";\nimport { HTMLView } from \"./view\";\nimport { DOM } from \"./dom\";\nimport { Directive } from \"./directives/directive\";\nimport { BindingDirective } from \"./directives/binding\";\nimport { defaultExecutionContext } from \"./observation/observable\";\n/**\n * A template capable of creating HTMLView instances or rendering directly to DOM.\n * @public\n */\nexport class ViewTemplate {\n    /**\n     * Creates an instance of ViewTemplate.\n     * @param html - The html representing what this template will instantiate, including placeholders for directives.\n     * @param directives - The directives that will be connected to placeholders in the html.\n     */\n    constructor(html, directives) {\n        this.behaviorCount = 0;\n        this.hasHostBehaviors = false;\n        this.fragment = null;\n        this.targetOffset = 0;\n        this.viewBehaviorFactories = null;\n        this.hostBehaviorFactories = null;\n        this.html = html;\n        this.directives = directives;\n    }\n    /**\n     * Creates an HTMLView instance based on this template definition.\n     * @param hostBindingTarget - The element that host behaviors will be bound to.\n     */\n    create(hostBindingTarget) {\n        if (this.fragment === null) {\n            let template;\n            const html = this.html;\n            if (typeof html === \"string\") {\n                template = document.createElement(\"template\");\n                template.innerHTML = DOM.createHTML(html);\n                const fec = template.content.firstElementChild;\n                if (fec !== null && fec.tagName === \"TEMPLATE\") {\n                    template = fec;\n                }\n            }\n            else {\n                template = html;\n            }\n            const result = compileTemplate(template, this.directives);\n            this.fragment = result.fragment;\n            this.viewBehaviorFactories = result.viewBehaviorFactories;\n            this.hostBehaviorFactories = result.hostBehaviorFactories;\n            this.targetOffset = result.targetOffset;\n            this.behaviorCount =\n                this.viewBehaviorFactories.length + this.hostBehaviorFactories.length;\n            this.hasHostBehaviors = this.hostBehaviorFactories.length > 0;\n        }\n        const fragment = this.fragment.cloneNode(true);\n        const viewFactories = this.viewBehaviorFactories;\n        const behaviors = new Array(this.behaviorCount);\n        const walker = DOM.createTemplateWalker(fragment);\n        let behaviorIndex = 0;\n        let targetIndex = this.targetOffset;\n        let node = walker.nextNode();\n        for (let ii = viewFactories.length; behaviorIndex < ii; ++behaviorIndex) {\n            const factory = viewFactories[behaviorIndex];\n            const factoryIndex = factory.targetIndex;\n            while (node !== null) {\n                if (targetIndex === factoryIndex) {\n                    behaviors[behaviorIndex] = factory.createBehavior(node);\n                    break;\n                }\n                else {\n                    node = walker.nextNode();\n                    targetIndex++;\n                }\n            }\n        }\n        if (this.hasHostBehaviors) {\n            const hostFactories = this.hostBehaviorFactories;\n            for (let i = 0, ii = hostFactories.length; i < ii; ++i, ++behaviorIndex) {\n                behaviors[behaviorIndex] = hostFactories[i].createBehavior(hostBindingTarget);\n            }\n        }\n        return new HTMLView(fragment, behaviors);\n    }\n    /**\n     * Creates an HTMLView from this template, binds it to the source, and then appends it to the host.\n     * @param source - The data source to bind the template to.\n     * @param host - The Element where the template will be rendered.\n     * @param hostBindingTarget - An HTML element to target the host bindings at if different from the\n     * host that the template is being attached to.\n     */\n    render(source, host, hostBindingTarget) {\n        if (typeof host === \"string\") {\n            host = document.getElementById(host);\n        }\n        if (hostBindingTarget === void 0) {\n            hostBindingTarget = host;\n        }\n        const view = this.create(hostBindingTarget);\n        view.bind(source, defaultExecutionContext);\n        view.appendTo(host);\n        return view;\n    }\n}\n// Much thanks to LitHTML for working this out!\nconst lastAttributeNameRegex = \n// eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n/**\n * Transforms a template literal string into a renderable ViewTemplate.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @remarks\n * The html helper supports interpolation of strings, numbers, binding expressions,\n * other template instances, and Directive instances.\n * @public\n */\nexport function html(strings, ...values) {\n    const directives = [];\n    let html = \"\";\n    for (let i = 0, ii = strings.length - 1; i < ii; ++i) {\n        const currentString = strings[i];\n        let value = values[i];\n        html += currentString;\n        if (value instanceof ViewTemplate) {\n            const template = value;\n            value = () => template;\n        }\n        if (typeof value === \"function\") {\n            value = new BindingDirective(value);\n            const match = lastAttributeNameRegex.exec(currentString);\n            if (match !== null) {\n                value.targetName = match[2];\n            }\n        }\n        if (value instanceof Directive) {\n            // Since not all values are directives, we can't use i\n            // as the index for the placeholder. Instead, we need to\n            // use directives.length to get the next index.\n            html += value.createPlaceholder(directives.length);\n            directives.push(value);\n        }\n        else {\n            html += value;\n        }\n    }\n    html += strings[strings.length - 1];\n    return new ViewTemplate(html, directives);\n}\n","import { DOM } from \"./dom\";\nconst styleLookup = new Map();\n/**\n * Represents styles that can be applied to a custom element.\n * @public\n */\nexport class ElementStyles {\n    constructor() {\n        /** @internal */\n        this.behaviors = null;\n        /* eslint-enable @typescript-eslint/explicit-function-return-type */\n    }\n    /**\n     * Associates behaviors with this set of styles.\n     * @param behaviors - The behaviors to associate.\n     */\n    withBehaviors(...behaviors) {\n        this.behaviors =\n            this.behaviors === null ? behaviors : this.behaviors.concat(behaviors);\n        return this;\n    }\n    /**\n     * Adds these styles to a global cache for easy lookup by a known key.\n     * @param key - The key to use for lookup and retrieval in the cache.\n     */\n    withKey(key) {\n        styleLookup.set(key, this);\n        return this;\n    }\n    /**\n     * Attempts to find cached styles by a known key.\n     * @param key - The key to search the style cache for.\n     */\n    static find(key) {\n        return styleLookup.get(key) || null;\n    }\n}\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/**\n * Create ElementStyles from ComposableStyles.\n */\nElementStyles.create = (() => {\n    if (DOM.supportsAdoptedStyleSheets) {\n        const styleSheetCache = new Map();\n        return (styles) => new AdoptedStyleSheetsStyles(styles, styleSheetCache);\n    }\n    return (styles) => new StyleElementStyles(styles);\n})();\nfunction reduceStyles(styles) {\n    return styles\n        .map((x) => x instanceof ElementStyles ? reduceStyles(x.styles) : [x])\n        .reduce((prev, curr) => prev.concat(curr), []);\n}\nfunction reduceBehaviors(styles) {\n    return styles\n        .map((x) => (x instanceof ElementStyles ? x.behaviors : null))\n        .reduce((prev, curr) => {\n        if (curr === null) {\n            return prev;\n        }\n        if (prev === null) {\n            prev = [];\n        }\n        return prev.concat(curr);\n    }, null);\n}\n/**\n * https://wicg.github.io/construct-stylesheets/\n * https://developers.google.com/web/updates/2019/02/constructable-stylesheets\n *\n * @internal\n */\nexport class AdoptedStyleSheetsStyles extends ElementStyles {\n    constructor(styles, styleSheetCache) {\n        super();\n        this.styles = styles;\n        this.behaviors = null;\n        this.behaviors = reduceBehaviors(styles);\n        this.styleSheets = reduceStyles(styles).map((x) => {\n            if (x instanceof CSSStyleSheet) {\n                return x;\n            }\n            let sheet = styleSheetCache.get(x);\n            if (sheet === void 0) {\n                sheet = new CSSStyleSheet();\n                sheet.replaceSync(x);\n                styleSheetCache.set(x, sheet);\n            }\n            return sheet;\n        });\n    }\n    addStylesTo(target) {\n        target.adoptedStyleSheets = [...target.adoptedStyleSheets, ...this.styleSheets];\n    }\n    removeStylesFrom(target) {\n        const sourceSheets = this.styleSheets;\n        target.adoptedStyleSheets = target.adoptedStyleSheets.filter((x) => sourceSheets.indexOf(x) === -1);\n    }\n}\nlet styleClassId = 0;\nfunction getNextStyleClass() {\n    return `fast-style-class-${++styleClassId}`;\n}\n/**\n * @internal\n */\nexport class StyleElementStyles extends ElementStyles {\n    constructor(styles) {\n        super();\n        this.styles = styles;\n        this.behaviors = null;\n        this.behaviors = reduceBehaviors(styles);\n        this.styleSheets = reduceStyles(styles);\n        this.styleClass = getNextStyleClass();\n    }\n    addStylesTo(target) {\n        const styleSheets = this.styleSheets;\n        const styleClass = this.styleClass;\n        if (target === document) {\n            target = document.body;\n        }\n        for (let i = styleSheets.length - 1; i > -1; --i) {\n            const element = document.createElement(\"style\");\n            element.innerHTML = styleSheets[i];\n            element.className = styleClass;\n            target.prepend(element);\n        }\n    }\n    removeStylesFrom(target) {\n        if (target === document) {\n            target = document.body;\n        }\n        const styles = target.querySelectorAll(`.${this.styleClass}`);\n        for (let i = 0, ii = styles.length; i < ii; ++i) {\n            target.removeChild(styles[i]);\n        }\n    }\n}\n/**\n * Transforms a template literal string into styles.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @remarks\n * The css helper supports interpolation of strings and ElementStyle instances.\n * @public\n */\nexport function css(strings, ...values) {\n    const styles = [];\n    let cssString = \"\";\n    for (let i = 0, ii = strings.length - 1; i < ii; ++i) {\n        cssString += strings[i];\n        const value = values[i];\n        if (value instanceof ElementStyles || value instanceof CSSStyleSheet) {\n            if (cssString.trim() !== \"\") {\n                styles.push(cssString);\n                cssString = \"\";\n            }\n            styles.push(value);\n        }\n        else {\n            cssString += value;\n        }\n    }\n    cssString += strings[strings.length - 1];\n    if (cssString.trim() !== \"\") {\n        styles.push(cssString);\n    }\n    return ElementStyles.create(styles);\n}\n","import { Observable } from \"./observation/observable\";\nimport { DOM } from \"./dom\";\n/**\n * A {@link ValueConverter} that converts to and from `boolean` values.\n * @remarks\n * Used automatically when the `boolean` {@link AttributeMode} is selected.\n * @public\n */\nexport const booleanConverter = {\n    toView(value) {\n        return value ? \"true\" : \"false\";\n    },\n    fromView(value) {\n        if (value === null ||\n            value === void 0 ||\n            value === \"false\" ||\n            value === false ||\n            value === 0) {\n            return false;\n        }\n        return true;\n    },\n};\n/**\n * A {@link ValueConverter} that converts to and from `number` values.\n * @remarks\n * This converter allows for nullable numbers, returning `null` if the\n * input was `null`, `undefined`, or `NaN`.\n * @public\n */\nexport const nullableNumberConverter = {\n    toView(value) {\n        if (value === null || value === undefined) {\n            return null;\n        }\n        const number = value * 1;\n        return isNaN(number) ? null : number.toString();\n    },\n    fromView(value) {\n        if (value === null || value === undefined) {\n            return null;\n        }\n        const number = value * 1;\n        return isNaN(number) ? null : number;\n    },\n};\n/**\n * An implementation of {@link Accessor} that supports reactivity,\n * change callbacks, attribute reflection, and type conversion for\n * custom elements.\n * @public\n */\nexport class AttributeDefinition {\n    /**\n     * Creates an instance of AttributeDefinition.\n     * @param Owner - The class constructor that owns this attribute.\n     * @param name - The name of the property associated with the attribute.\n     * @param attribute - The name of the attribute in HTML.\n     * @param mode - The {@link AttributeMode} that describes the behavior of this attribute.\n     * @param converter - A {@link ValueConverter} that integrates with the property getter/setter\n     * to convert values to and from a DOM string.\n     */\n    constructor(Owner, name, attribute = name.toLowerCase(), mode = \"reflect\", converter) {\n        this.guards = new Set();\n        this.Owner = Owner;\n        this.name = name;\n        this.attribute = attribute;\n        this.mode = mode;\n        this.converter = converter;\n        this.fieldName = `_${name}`;\n        this.callbackName = `${name}Changed`;\n        this.hasCallback = this.callbackName in Owner.prototype;\n        if (mode === \"boolean\" && converter === void 0) {\n            this.converter = booleanConverter;\n        }\n    }\n    /**\n     * Sets the value of the attribute/property on the source element.\n     * @param source - The source element to access.\n     * @param value - The value to set the attribute/property to.\n     */\n    setValue(source, newValue) {\n        const oldValue = source[this.fieldName];\n        const converter = this.converter;\n        if (converter !== void 0) {\n            newValue = converter.fromView(newValue);\n        }\n        if (oldValue !== newValue) {\n            source[this.fieldName] = newValue;\n            this.tryReflectToAttribute(source);\n            if (this.hasCallback) {\n                source[this.callbackName](oldValue, newValue);\n            }\n            source.$fastController.notify(this.name);\n        }\n    }\n    /**\n     * Gets the value of the attribute/property on the source element.\n     * @param source - The source element to access.\n     */\n    getValue(source) {\n        Observable.track(source, this.name);\n        return source[this.fieldName];\n    }\n    /** @internal */\n    onAttributeChangedCallback(element, value) {\n        if (this.guards.has(element)) {\n            return;\n        }\n        this.guards.add(element);\n        this.setValue(element, value);\n        this.guards.delete(element);\n    }\n    tryReflectToAttribute(element) {\n        const mode = this.mode;\n        const guards = this.guards;\n        if (guards.has(element) || mode === \"fromView\") {\n            return;\n        }\n        DOM.queueUpdate(() => {\n            guards.add(element);\n            const latestValue = element[this.fieldName];\n            switch (mode) {\n                case \"reflect\":\n                    const converter = this.converter;\n                    DOM.setAttribute(element, this.attribute, converter !== void 0 ? converter.toView(latestValue) : latestValue);\n                    break;\n                case \"boolean\":\n                    DOM.setBooleanAttribute(element, this.attribute, latestValue);\n                    break;\n            }\n            guards.delete(element);\n        });\n    }\n    /**\n     * Collects all attribute definitions associated with the owner.\n     * @param Owner - The class constructor to collect attribute for.\n     * @param attributeLists - Any existing attributes to collect and merge with those associated with the owner.\n     * @internal\n     */\n    static collect(Owner, ...attributeLists) {\n        const attributes = [];\n        attributeLists.push(Owner.attributes);\n        for (let i = 0, ii = attributeLists.length; i < ii; ++i) {\n            const list = attributeLists[i];\n            if (list === void 0) {\n                continue;\n            }\n            for (let j = 0, jj = list.length; j < jj; ++j) {\n                const config = list[j];\n                if (typeof config === \"string\") {\n                    attributes.push(new AttributeDefinition(Owner, config));\n                }\n                else {\n                    attributes.push(new AttributeDefinition(Owner, config.property, config.attribute, config.mode, config.converter));\n                }\n            }\n        }\n        return attributes;\n    }\n}\nexport function attr(configOrTarget, prop) {\n    let config;\n    function decorator($target, $prop) {\n        if (arguments.length > 1) {\n            // Non invocation:\n            // - @attr\n            // Invocation with or w/o opts:\n            // - @attr()\n            // - @attr({...opts})\n            config.property = $prop;\n        }\n        const attributes = $target.constructor.attributes ||\n            ($target.constructor.attributes = []);\n        attributes.push(config);\n    }\n    if (arguments.length > 1) {\n        // Non invocation:\n        // - @attr\n        config = {};\n        decorator(configOrTarget, prop);\n        return;\n    }\n    // Invocation with or w/o opts:\n    // - @attr()\n    // - @attr({...opts})\n    config = configOrTarget === void 0 ? {} : configOrTarget;\n    return decorator;\n}\n","import { ElementStyles } from \"./styles\";\nimport { AttributeDefinition } from \"./attributes\";\nimport { Observable } from \"./observation/observable\";\nconst defaultShadowOptions = { mode: \"open\" };\nconst defaultElementOptions = {};\nconst fastDefinitions = new Map();\n/**\n * Defines metadata for a FASTElement.\n * @public\n */\nexport class FASTElementDefinition {\n    /**\n     * Creates an instance of FASTElementDefinition.\n     * @param type - The type this definition is being created for.\n     * @param nameOrConfig - The name of the element to define or a config object\n     * that describes the element to define.\n     */\n    constructor(type, nameOrConfig = type.definition) {\n        if (typeof nameOrConfig === \"string\") {\n            nameOrConfig = { name: nameOrConfig };\n        }\n        this.type = type;\n        this.name = nameOrConfig.name;\n        this.template = nameOrConfig.template;\n        const attributes = AttributeDefinition.collect(type, nameOrConfig.attributes);\n        const observedAttributes = new Array(attributes.length);\n        const propertyLookup = {};\n        const attributeLookup = {};\n        for (let i = 0, ii = attributes.length; i < ii; ++i) {\n            const current = attributes[i];\n            observedAttributes[i] = current.attribute;\n            propertyLookup[current.name] = current;\n            attributeLookup[current.attribute] = current;\n        }\n        this.attributes = attributes;\n        this.observedAttributes = observedAttributes;\n        this.propertyLookup = propertyLookup;\n        this.attributeLookup = attributeLookup;\n        this.shadowOptions =\n            nameOrConfig.shadowOptions === void 0\n                ? defaultShadowOptions\n                : nameOrConfig.shadowOptions === null\n                    ? void 0\n                    : Object.assign(Object.assign({}, defaultShadowOptions), nameOrConfig.shadowOptions);\n        this.elementOptions =\n            nameOrConfig.elementOptions === void 0\n                ? defaultElementOptions\n                : Object.assign(Object.assign({}, defaultElementOptions), nameOrConfig.elementOptions);\n        this.styles =\n            nameOrConfig.styles === void 0\n                ? void 0\n                : Array.isArray(nameOrConfig.styles)\n                    ? ElementStyles.create(nameOrConfig.styles)\n                    : nameOrConfig.styles instanceof ElementStyles\n                        ? nameOrConfig.styles\n                        : ElementStyles.create([nameOrConfig.styles]);\n    }\n    /**\n     * Defines a custom element based on this definition.\n     * @param registry - The element registry to define the element in.\n     */\n    define(registry = customElements) {\n        const type = this.type;\n        if (!this.isDefined) {\n            const attributes = this.attributes;\n            const proto = type.prototype;\n            for (let i = 0, ii = attributes.length; i < ii; ++i) {\n                Observable.defineProperty(proto, attributes[i]);\n            }\n            Reflect.defineProperty(type, \"observedAttributes\", {\n                value: this.observedAttributes,\n                enumerable: true,\n            });\n            fastDefinitions.set(type, this);\n            this.isDefined = true;\n        }\n        if (!registry.get(this.name)) {\n            registry.define(this.name, type, this.elementOptions);\n        }\n        return this;\n    }\n    /**\n     * Gets the element definition associated with the specified type.\n     * @param type - The custom element type to retrieve the definition for.\n     */\n    static forType(type) {\n        return fastDefinitions.get(type);\n    }\n}\n","import { FASTElementDefinition } from \"./fast-definitions\";\nimport { PropertyChangeNotifier } from \"./observation/notifier\";\nimport { defaultExecutionContext, Observable } from \"./observation/observable\";\nimport { DOM } from \"./dom\";\nconst shadowRoots = new WeakMap();\nconst defaultEventOptions = {\n    bubbles: true,\n    composed: true,\n};\nfunction getShadowRoot(element) {\n    return element.shadowRoot || shadowRoots.get(element) || null;\n}\n/**\n * Controls the lifecycle and rendering of a `FASTElement`.\n * @public\n */\nexport class Controller extends PropertyChangeNotifier {\n    /**\n     * Creates a Controller to control the specified element.\n     * @param element - The element to be controlled by this controller.\n     * @param definition - The element definition metadata that instructs this\n     * controller in how to handle rendering and other platform integrations.\n     * @internal\n     */\n    constructor(element, definition) {\n        super(element);\n        this.boundObservables = null;\n        this.behaviors = null;\n        this.needsInitialization = true;\n        this._template = null;\n        this._styles = null;\n        /**\n         * The view associated with the custom element.\n         * @remarks\n         * If `null` then the element is managing its own rendering.\n         */\n        this.view = null;\n        /**\n         * Indicates whether or not the custom element has been\n         * connected to the document.\n         */\n        this.isConnected = false;\n        this.element = element;\n        this.definition = definition;\n        const shadowOptions = definition.shadowOptions;\n        if (shadowOptions !== void 0) {\n            const shadowRoot = element.attachShadow(shadowOptions);\n            if (shadowOptions.mode === \"closed\") {\n                shadowRoots.set(element, shadowRoot);\n            }\n        }\n        // Capture any observable values that were set by the binding engine before\n        // the browser upgraded the element. Then delete the property since it will\n        // shadow the getter/setter that is required to make the observable operate.\n        // Later, in the connect callback, we'll re-apply the values.\n        const accessors = Observable.getAccessors(element);\n        if (accessors.length > 0) {\n            const boundObservables = (this.boundObservables = Object.create(null));\n            for (let i = 0, ii = accessors.length; i < ii; ++i) {\n                const propertyName = accessors[i].name;\n                const value = element[propertyName];\n                if (value !== void 0) {\n                    delete element[propertyName];\n                    boundObservables[propertyName] = value;\n                }\n            }\n        }\n    }\n    /**\n     * Gets/sets the template used to render the component.\n     * @remarks\n     * This value can only be accurately read after connect but can be set at any time.\n     */\n    get template() {\n        return this._template;\n    }\n    set template(value) {\n        if (this._template === value) {\n            return;\n        }\n        this._template = value;\n        if (!this.needsInitialization) {\n            this.renderTemplate(value);\n        }\n    }\n    /**\n     * Gets/sets the primary styles used for the component.\n     * @remarks\n     * This value can only be accurately read after connect but can be set at any time.\n     */\n    get styles() {\n        return this._styles;\n    }\n    set styles(value) {\n        if (this._styles === value) {\n            return;\n        }\n        if (this._styles !== null) {\n            this.removeStyles(this._styles);\n        }\n        this._styles = value;\n        if (!this.needsInitialization && value !== null) {\n            this.addStyles(value);\n        }\n    }\n    /**\n     * Adds styles to this element.\n     * @param styles - The styles to add.\n     */\n    addStyles(styles) {\n        const sourceBehaviors = styles.behaviors;\n        const target = getShadowRoot(this.element) ||\n            this.element.getRootNode();\n        styles.addStylesTo(target);\n        if (sourceBehaviors !== null) {\n            this.addBehaviors(sourceBehaviors);\n        }\n    }\n    /**\n     * Removes styles from this element.\n     * @param styles - the styles to remove.\n     */\n    removeStyles(styles) {\n        const sourceBehaviors = styles.behaviors;\n        const target = getShadowRoot(this.element) ||\n            this.element.getRootNode();\n        styles.removeStylesFrom(target);\n        if (sourceBehaviors !== null) {\n            this.removeBehaviors(sourceBehaviors);\n        }\n    }\n    /**\n     * Adds behaviors to this element.\n     * @param behaviors - The behaviors to add.\n     */\n    addBehaviors(behaviors) {\n        const targetBehaviors = this.behaviors || (this.behaviors = []);\n        const length = behaviors.length;\n        for (let i = 0; i < length; ++i) {\n            targetBehaviors.push(behaviors[i]);\n        }\n        if (this.isConnected) {\n            const element = this.element;\n            for (let i = 0; i < length; ++i) {\n                behaviors[i].bind(element, defaultExecutionContext);\n            }\n        }\n    }\n    /**\n     * Removes behaviors from this element.\n     * @param behaviors - The behaviors to remove.\n     */\n    removeBehaviors(behaviors) {\n        const targetBehaviors = this.behaviors;\n        if (targetBehaviors === null) {\n            return;\n        }\n        const length = behaviors.length;\n        for (let i = 0; i < length; ++i) {\n            const index = targetBehaviors.indexOf(behaviors[i]);\n            if (index !== -1) {\n                targetBehaviors.splice(index, 1);\n            }\n        }\n        if (this.isConnected) {\n            const element = this.element;\n            for (let i = 0; i < length; ++i) {\n                behaviors[i].unbind(element);\n            }\n        }\n    }\n    /**\n     * Runs connected lifecycle behavior on the associated element.\n     */\n    onConnectedCallback() {\n        if (this.isConnected) {\n            return;\n        }\n        const element = this.element;\n        if (this.needsInitialization) {\n            this.finishInitialization();\n        }\n        else if (this.view !== null) {\n            this.view.bind(element, defaultExecutionContext);\n        }\n        const behaviors = this.behaviors;\n        if (behaviors !== null) {\n            for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n                behaviors[i].bind(element, defaultExecutionContext);\n            }\n        }\n        this.isConnected = true;\n    }\n    /**\n     * Runs disconnected lifecycle behavior on the associated element.\n     */\n    onDisconnectedCallback() {\n        if (this.isConnected === false) {\n            return;\n        }\n        this.isConnected = false;\n        const view = this.view;\n        if (view !== null) {\n            view.unbind();\n        }\n        const behaviors = this.behaviors;\n        if (behaviors !== null) {\n            const element = this.element;\n            for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n                behaviors[i].unbind(element);\n            }\n        }\n    }\n    /**\n     * Runs the attribute changed callback for the associated element.\n     * @param name - The name of the attribute that changed.\n     * @param oldValue - The previous value of the attribute.\n     * @param newValue - The new value of the attribute.\n     */\n    onAttributeChangedCallback(name, oldValue, newValue) {\n        const attrDef = this.definition.attributeLookup[name];\n        if (attrDef !== void 0) {\n            attrDef.onAttributeChangedCallback(this.element, newValue);\n        }\n    }\n    /**\n     * Emits a custom HTML event.\n     * @param type - The type name of the event.\n     * @param detail - The event detail object to send with the event.\n     * @param options - The event options. By default bubbles and composed.\n     * @remarks\n     * Only emits events if connected.\n     */\n    emit(type, detail, options) {\n        if (this.isConnected) {\n            return this.element.dispatchEvent(new CustomEvent(type, Object.assign(Object.assign({ detail }, defaultEventOptions), options)));\n        }\n        return false;\n    }\n    finishInitialization() {\n        const element = this.element;\n        const boundObservables = this.boundObservables;\n        // If we have any observables that were bound, re-apply their values.\n        if (boundObservables !== null) {\n            const propertyNames = Object.keys(boundObservables);\n            for (let i = 0, ii = propertyNames.length; i < ii; ++i) {\n                const propertyName = propertyNames[i];\n                element[propertyName] = boundObservables[propertyName];\n            }\n            this.boundObservables = null;\n        }\n        const definition = this.definition;\n        // 1. Template overrides take top precedence.\n        if (this._template === null) {\n            if (this.element.resolveTemplate) {\n                // 2. Allow for element instance overrides next.\n                this._template = this.element.resolveTemplate();\n            }\n            else if (definition.template) {\n                // 3. Default to the static definition.\n                this._template = definition.template || null;\n            }\n        }\n        // If we have a template after the above process, render it.\n        // If there's no template, then the element author has opted into\n        // custom rendering and they will managed the shadow root's content themselves.\n        if (this._template !== null) {\n            this.renderTemplate(this._template);\n        }\n        // 1. Styles overrides take top precedence.\n        if (this._styles === null) {\n            if (this.element.resolveStyles) {\n                // 2. Allow for element instance overrides next.\n                this._styles = this.element.resolveStyles();\n            }\n            else if (definition.styles) {\n                // 3. Default to the static definition.\n                this._styles = definition.styles || null;\n            }\n        }\n        // If we have styles after the above process, add them.\n        if (this._styles !== null) {\n            this.addStyles(this._styles);\n        }\n        this.needsInitialization = false;\n    }\n    renderTemplate(template) {\n        const element = this.element;\n        // When getting the host to render to, we start by looking\n        // up the shadow root. If there isn't one, then that means\n        // we're doing a Light DOM render to the element's direct children.\n        const host = getShadowRoot(element) || element;\n        if (this.view !== null) {\n            // If there's already a view, we need to unbind and remove through dispose.\n            this.view.dispose();\n            this.view = null;\n        }\n        else if (!this.needsInitialization) {\n            // If there was previous custom rendering, we need to clear out the host.\n            DOM.removeChildNodes(host);\n        }\n        if (template) {\n            // If a new template was provided, render it.\n            this.view = template.render(element, host, element);\n        }\n    }\n    /**\n     * Locates or creates a controller for the specified element.\n     * @param element - The element to return the controller for.\n     * @remarks\n     * The specified element must have a {@link FASTElementDefinition}\n     * registered either through the use of the {@link customElement}\n     * decorator or a call to `FASTElement.define`.\n     */\n    static forCustomElement(element) {\n        const controller = element.$fastController;\n        if (controller !== void 0) {\n            return controller;\n        }\n        const definition = FASTElementDefinition.forType(element.constructor);\n        if (definition === void 0) {\n            throw new Error(\"Missing FASTElement definition.\");\n        }\n        return (element.$fastController = new Controller(element, definition));\n    }\n}\n","import { Controller } from \"./controller\";\nimport { FASTElementDefinition } from \"./fast-definitions\";\n/* eslint-disable-next-line @typescript-eslint/explicit-function-return-type */\nfunction createFASTElement(BaseType) {\n    return class extends BaseType {\n        constructor() {\n            /* eslint-disable-next-line */\n            super();\n            Controller.forCustomElement(this);\n        }\n        $emit(type, detail, options) {\n            return this.$fastController.emit(type, detail, options);\n        }\n        connectedCallback() {\n            this.$fastController.onConnectedCallback();\n        }\n        disconnectedCallback() {\n            this.$fastController.onDisconnectedCallback();\n        }\n        attributeChangedCallback(name, oldValue, newValue) {\n            this.$fastController.onAttributeChangedCallback(name, oldValue, newValue);\n        }\n    };\n}\n/**\n * A minimal base class for FASTElements that also provides\n * static helpers for working with FASTElements.\n * @public\n */\nexport const FASTElement = Object.assign(createFASTElement(HTMLElement), {\n    /**\n     * Creates a new FASTElement base class inherited from the\n     * provided base type.\n     * @param BaseType - The base element type to inherit from.\n     */\n    from(BaseType) {\n        return createFASTElement(BaseType);\n    },\n    /**\n     * Defines a platform custom element based on the provided type and definition.\n     * @param type - The custom element type to define.\n     * @param nameOrDef - The name of the element to define or a definition object\n     * that describes the element to define.\n     */\n    define(type, nameOrDef) {\n        return new FASTElementDefinition(type, nameOrDef).define().type;\n    },\n});\n/**\n * Decorator: Defines a platform custom element based on `FASTElement`.\n * @param nameOrDef - The name of the element to define or a definition object\n * that describes the element to define.\n * @public\n */\nexport function customElement(nameOrDef) {\n    /* eslint-disable-next-line @typescript-eslint/explicit-function-return-type */\n    return function (type) {\n        new FASTElementDefinition(type, nameOrDef).define();\n    };\n}\n","import {\n    customElement,\n    FASTElement,\n    html,\n    observable\n} from \"@microsoft/fast-element\";\n\nconst template = html`\n    <div>\n        <h1>Dice Roller Fluid Demo</h1>\n        This demonstration shows how to use Fluid distributed data structures to sync data across multiple clients.\n        After starting the demo (see the readme for instructions), copy the browser's URL into another tab to create another Fluid client. \n        <br /><br />\n        After multiple clients are available, click the Roll button to sync rolls across all of the clients.\n        <br />\n        <div style=\"text-align: center\">\n        <div style=\"font-size: 200px;\" :style=\"{color: ${x => x.diceCharColor} }\">\n            ${x => x.diceChar}\n        </div>\n        <button style=\"font-size: 50px\" @click=\"${x => x.roll()}\">Roll</button>\n        </div>\n    </div>\n`;\n\n@customElement({\n    name: \"diceroller\",\n    template\n})\nexport class DiceRoller extends FASTElement {\n    @observable diceCharColor: string;\n    @observable diceChar: string;\n\n    public roll() {\n        \n    }\n}"],"sourceRoot":""}